//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMPTUOBJECTS_COMMPTUMOVERESPONSE_CORE_H_
#define COMMPTUOBJECTS_COMMPTUMOVERESPONSE_CORE_H_

#include "CommPTUObjects/CommPTUMoveResponseData.hh"
#include "CommPTUObjects/enumPTUMoveStatus.hh"
#include "CommBasicObjects/CommPose3d.hh"
#include "CommBasicObjects/CommBaseState.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommPTUObjects {
	
class CommPTUMoveResponseCore {
protected:
	// data structure
	CommPTUObjectsIDL::CommPTUMoveResponse idl_CommPTUMoveResponse;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommPTUObjectsIDL::CommPTUMoveResponse DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommPTUMoveResponseCore();
	CommPTUMoveResponseCore(const DATATYPE &data);
	// default destructor
	virtual ~CommPTUMoveResponseCore();
	
	const DATATYPE& get() const { return idl_CommPTUMoveResponse; }
	operator const DATATYPE&() const { return idl_CommPTUMoveResponse; }
	DATATYPE& set() { return idl_CommPTUMoveResponse; }

	static inline std::string identifier(void) { return "CommPTUObjects::CommPTUMoveResponse"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element DevicePose
	inline CommBasicObjects::CommPose3d getDevicePose() const { return CommBasicObjects::CommPose3d(idl_CommPTUMoveResponse.devicePose); }
	inline CommPTUMoveResponseCore& setDevicePose(const CommBasicObjects::CommPose3d &devicePose) { idl_CommPTUMoveResponse.devicePose = devicePose; return *this; }
	
	// getter and setter for element StateBase
	inline CommBasicObjects::CommBaseState getStateBase() const { return CommBasicObjects::CommBaseState(idl_CommPTUMoveResponse.stateBase); }
	inline CommPTUMoveResponseCore& setStateBase(const CommBasicObjects::CommBaseState &stateBase) { idl_CommPTUMoveResponse.stateBase = stateBase; return *this; }
	
	// getter and setter for element Status
	inline CommPTUObjects::PTUMoveStatus getStatus() const { return CommPTUObjects::PTUMoveStatus(idl_CommPTUMoveResponse.status); }
	inline CommPTUMoveResponseCore& setStatus(const CommPTUObjects::PTUMoveStatus &status) { idl_CommPTUMoveResponse.status = status; return *this; }
};

} /* namespace CommPTUObjects */
#endif /* COMMPTUOBJECTS_COMMPTUMOVERESPONSE_CORE_H_ */
