//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMPTUOBJECTS_COMMPTUMOVEREQUEST_CORE_H_
#define COMMPTUOBJECTS_COMMPTUMOVEREQUEST_CORE_H_

#include "CommPTUObjects/CommPTUMoveRequestData.hh"
#include "CommBasicObjects/CommPosition3d.hh"
#include "CommPTUObjects/enumPTUMoveFlag.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommPTUObjects {
	
class CommPTUMoveRequestCore {
protected:
	// data structure
	CommPTUObjectsIDL::CommPTUMoveRequest idl_CommPTUMoveRequest;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommPTUObjectsIDL::CommPTUMoveRequest DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommPTUMoveRequestCore();
	CommPTUMoveRequestCore(const DATATYPE &data);
	// default destructor
	virtual ~CommPTUMoveRequestCore();
	
	const DATATYPE& get() const { return idl_CommPTUMoveRequest; }
	operator const DATATYPE&() const { return idl_CommPTUMoveRequest; }
	DATATYPE& set() { return idl_CommPTUMoveRequest; }

	static inline std::string identifier(void) { return "CommPTUObjects::CommPTUMoveRequest"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Pan
	inline double getPan() const { return idl_CommPTUMoveRequest.pan; }
	inline CommPTUMoveRequestCore& setPan(const double &pan) { idl_CommPTUMoveRequest.pan = pan; return *this; }
	
	// getter and setter for element Tilt
	inline double getTilt() const { return idl_CommPTUMoveRequest.tilt; }
	inline CommPTUMoveRequestCore& setTilt(const double &tilt) { idl_CommPTUMoveRequest.tilt = tilt; return *this; }
	
	// getter and setter for element Point
	inline CommBasicObjects::CommPosition3d getPoint() const { return CommBasicObjects::CommPosition3d(idl_CommPTUMoveRequest.point); }
	inline CommPTUMoveRequestCore& setPoint(const CommBasicObjects::CommPosition3d &point) { idl_CommPTUMoveRequest.point = point; return *this; }
	
	// getter and setter for element Flag
	inline CommPTUObjects::PTUMoveFlag getFlag() const { return CommPTUObjects::PTUMoveFlag(idl_CommPTUMoveRequest.flag); }
	inline CommPTUMoveRequestCore& setFlag(const CommPTUObjects::PTUMoveFlag &flag) { idl_CommPTUMoveRequest.flag = flag; return *this; }
};

} /* namespace CommPTUObjects */
#endif /* COMMPTUOBJECTS_COMMPTUMOVEREQUEST_CORE_H_ */
