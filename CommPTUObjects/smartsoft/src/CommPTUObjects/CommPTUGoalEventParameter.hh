//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMPTUOBJECTS_COMMPTUGOALEVENTPARAMETER_H_
#define COMMPTUOBJECTS_COMMPTUGOALEVENTPARAMETER_H_

#include "CommPTUObjects/CommPTUGoalEventParameterCore.hh"

namespace CommPTUObjects {
		
class CommPTUGoalEventParameter : public CommPTUGoalEventParameterCore {
	public:
		// default constructors
		CommPTUGoalEventParameter();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommPTUGoalEventParameter(const CommPTUObjects::PTUMoveStatus &oldState);
		
		CommPTUGoalEventParameter(const CommPTUGoalEventParameterCore &commPTUGoalEventParameter);
		CommPTUGoalEventParameter(const DATATYPE &commPTUGoalEventParameter);
		virtual ~CommPTUGoalEventParameter();
		
		// use framework specific getter and setter methods from core (base) class
		using CommPTUGoalEventParameterCore::get;
		using CommPTUGoalEventParameterCore::set;
		
		//
		// feel free to add customized methods here
		//

		inline PTUMoveStatus getOldState() const
		{
			return idl_CommPTUGoalEventParameter.oldState;
		}
		inline void setOldState(const PTUMoveStatus &oldState)
		{
			idl_CommPTUGoalEventParameter.oldState = oldState;
		}

		//
		// add your customized interface here
		//

		/**
		 * Set the status of the PTU action. (Success, Failure, etc.)
		 */
		inline void set_state(CommPTUObjects::PTUMoveStatus state) {
			idl_CommPTUGoalEventParameter.oldState = state;
		}

		/**
		 * Get the status of the PTU action. (Success, Failure, etc.)
		 */
		inline PTUMoveStatus get_state() const {
			return idl_CommPTUGoalEventParameter.oldState;
		}
};

inline std::ostream &operator<<(std::ostream &os, const CommPTUGoalEventParameter &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace CommPTUObjects */
#endif /* COMMPTUOBJECTS_COMMPTUGOALEVENTPARAMETER_H_ */
