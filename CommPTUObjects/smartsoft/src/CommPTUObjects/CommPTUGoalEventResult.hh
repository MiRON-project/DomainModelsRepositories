//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMPTUOBJECTS_COMMPTUGOALEVENTRESULT_H_
#define COMMPTUOBJECTS_COMMPTUGOALEVENTRESULT_H_

#include "CommPTUObjects/CommPTUGoalEventResultCore.hh"

#include <stdio.h>
#include <string.h>

namespace CommPTUObjects {
		
class CommPTUGoalEventResult : public CommPTUGoalEventResultCore {
	public:
		// default constructors
		CommPTUGoalEventResult();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommPTUGoalEventResult(const CommPTUObjects::PTUMoveStatus &state);
		
		CommPTUGoalEventResult(const CommPTUGoalEventResultCore &commPTUGoalEventResult);
		CommPTUGoalEventResult(const DATATYPE &commPTUGoalEventResult);
		virtual ~CommPTUGoalEventResult();
		
		// use framework specific getter and setter methods from core (base) class
		using CommPTUGoalEventResultCore::get;
		using CommPTUGoalEventResultCore::set;
		
		//
		// feel free to add customized methods here
		//

		inline PTUMoveStatus getState() const
		{
			return idl_CommPTUGoalEventResult.state;
		}
		inline void setState(const PTUMoveStatus &state)
		{
			idl_CommPTUGoalEventResult.state = state;
		}

		//
		// add your customized interface here
		//
		/**
		 * Set the status of the PTU action. (Success, Failure, etc.)
		 */
		inline void set_state(CommPTUObjects::PTUMoveStatus state) {
			idl_CommPTUGoalEventResult.state = state;
		}

		/**
		 * Get the status of the PTU action. (Success, Failure, etc.)
		 */
		inline PTUMoveStatus get_state() const {
			return idl_CommPTUGoalEventResult.state;
		}


		/**
		 * Get the status of the PTU action. (Success, Failure, etc.)
		 */
		inline void get(char* r) const
		{
			switch (idl_CommPTUGoalEventResult.state)
			{
			case PTUMoveStatus::FAILURE:
				strcpy(r, "(FAILURE)");
				break;

			case PTUMoveStatus::GOAL_NOT_REACHED:
				strcpy(r, "(GOALNOTREACHED)");
				break;

			case PTUMoveStatus::GOAL_REACHED:
				strcpy(r, "(GOALREACHED)");
				break;

			case PTUMoveStatus::HALTED:
				strcpy(r, "(HALTED)");
				break;

			case PTUMoveStatus::PAN_TILT_OUT_OF_RANGE:
			case PTUMoveStatus::TILT_OUT_OF_RANGE:
			case PTUMoveStatus::PAN_OUT_OF_RANGE:
				strcpy(r, "(OUTOFRANGE)");
				break;

			default:
				strcpy(r, "(UNKNOWN)");
				break;
			}
		}
};

inline std::ostream &operator<<(std::ostream &os, const CommPTUGoalEventResult &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace CommPTUObjects */
#endif /* COMMPTUOBJECTS_COMMPTUGOALEVENTRESULT_H_ */
