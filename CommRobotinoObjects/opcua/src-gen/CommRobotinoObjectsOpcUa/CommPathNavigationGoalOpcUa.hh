//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "CommRobotinoObjects/CommPathNavigationGoal.hh"
#include <SeRoNet/CommunicationObjects/Description/SelfDescription.hpp>
#include <SeRoNet/CommunicationObjects/Description/ElementPrimitives.hpp>
#pragma once

#include "CommRobotinoObjects/CommNavigationPathsOpcUa.hh"

namespace SeRoNet {
namespace CommunicationObjects {
namespace Description {
// serialization for CommPathNavigationGoal
template <>
ComplexType::shp_t SelfDescription(CommRobotinoObjects::CommPathNavigationGoal *obj, std::string name)
{
	auto ret = std::make_shared<SeRoNet::CommunicationObjects::Description::ComplexType>(name);
	/// \todo check for ComplexObjects
	// add goalID
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementInt32(
				"goalID",
				std::bind(&CommRobotinoObjects::CommPathNavigationGoal::getGoalID, obj),
				std::bind(&CommRobotinoObjects::CommPathNavigationGoal::setGoalID, obj, std::placeholders::_1)
			)
		)
	);
	ret->add(
		SelfDescription(&(obj->getPaths()), "CommNavigationPaths")
	);
	// add goalX
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementDouble(
				"goalX",
				std::bind(&CommRobotinoObjects::CommPathNavigationGoal::getGoalX, obj),
				std::bind(&CommRobotinoObjects::CommPathNavigationGoal::setGoalX, obj, std::placeholders::_1)
			)
		)
	);
	// add goalY
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementDouble(
				"goalY",
				std::bind(&CommRobotinoObjects::CommPathNavigationGoal::getGoalY, obj),
				std::bind(&CommRobotinoObjects::CommPathNavigationGoal::setGoalY, obj, std::placeholders::_1)
			)
		)
	);
	// add goal_id
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementInt32(
				"goal_id",
				std::bind(&CommRobotinoObjects::CommPathNavigationGoal::getGoal_id, obj),
				std::bind(&CommRobotinoObjects::CommPathNavigationGoal::setGoal_id, obj, std::placeholders::_1)
			)
		)
	);
	// add startX
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementDouble(
				"startX",
				std::bind(&CommRobotinoObjects::CommPathNavigationGoal::getStartX, obj),
				std::bind(&CommRobotinoObjects::CommPathNavigationGoal::setStartX, obj, std::placeholders::_1)
			)
		)
	);
	// add startY
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementDouble(
				"startY",
				std::bind(&CommRobotinoObjects::CommPathNavigationGoal::getStartY, obj),
				std::bind(&CommRobotinoObjects::CommPathNavigationGoal::setStartY, obj, std::placeholders::_1)
			)
		)
	);
	// add start_id
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementInt32(
				"start_id",
				std::bind(&CommRobotinoObjects::CommPathNavigationGoal::getStart_id, obj),
				std::bind(&CommRobotinoObjects::CommPathNavigationGoal::setStart_id, obj, std::placeholders::_1)
			)
		)
	);
	return ret;
} // end SelfDescription
} // end namespace Description
} // end namespace CommunicationObjects
} // end namespace SeRoNet
