//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMROBOTINOOBJECTS_COMMPATHNAVIGATIONGOAL_CORE_H_
#define COMMROBOTINOOBJECTS_COMMPATHNAVIGATIONGOAL_CORE_H_

#include "CommRobotinoObjects/CommPathNavigationGoalData.hh"
#include "CommRobotinoObjects/CommNavigationPaths.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommRobotinoObjects {
	
class CommPathNavigationGoalCore {
protected:
	// data structure
	CommRobotinoObjectsIDL::CommPathNavigationGoal idl_CommPathNavigationGoal;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommRobotinoObjectsIDL::CommPathNavigationGoal DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommPathNavigationGoalCore();
	CommPathNavigationGoalCore(const DATATYPE &data);
	// default destructor
	virtual ~CommPathNavigationGoalCore();
	
	const DATATYPE& get() const { return idl_CommPathNavigationGoal; }
	operator const DATATYPE&() const { return idl_CommPathNavigationGoal; }
	DATATYPE& set() { return idl_CommPathNavigationGoal; }

	static inline std::string identifier(void) { return "CommRobotinoObjects::CommPathNavigationGoal"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element GoalID
	inline int getGoalID() const { return idl_CommPathNavigationGoal.goalID; }
	inline CommPathNavigationGoalCore& setGoalID(const int &goalID) { idl_CommPathNavigationGoal.goalID = goalID; return *this; }
	
	// getter and setter for element Paths
	inline CommRobotinoObjects::CommNavigationPaths getPaths() const { return CommRobotinoObjects::CommNavigationPaths(idl_CommPathNavigationGoal.paths); }
	inline CommPathNavigationGoalCore& setPaths(const CommRobotinoObjects::CommNavigationPaths &paths) { idl_CommPathNavigationGoal.paths = paths; return *this; }
	
	// getter and setter for element GoalX
	inline double getGoalX() const { return idl_CommPathNavigationGoal.goalX; }
	inline CommPathNavigationGoalCore& setGoalX(const double &goalX) { idl_CommPathNavigationGoal.goalX = goalX; return *this; }
	
	// getter and setter for element GoalY
	inline double getGoalY() const { return idl_CommPathNavigationGoal.goalY; }
	inline CommPathNavigationGoalCore& setGoalY(const double &goalY) { idl_CommPathNavigationGoal.goalY = goalY; return *this; }
	
	// getter and setter for element Goal_id
	inline int getGoal_id() const { return idl_CommPathNavigationGoal.goal_id; }
	inline CommPathNavigationGoalCore& setGoal_id(const int &goal_id) { idl_CommPathNavigationGoal.goal_id = goal_id; return *this; }
	
	// getter and setter for element StartX
	inline double getStartX() const { return idl_CommPathNavigationGoal.startX; }
	inline CommPathNavigationGoalCore& setStartX(const double &startX) { idl_CommPathNavigationGoal.startX = startX; return *this; }
	
	// getter and setter for element StartY
	inline double getStartY() const { return idl_CommPathNavigationGoal.startY; }
	inline CommPathNavigationGoalCore& setStartY(const double &startY) { idl_CommPathNavigationGoal.startY = startY; return *this; }
	
	// getter and setter for element Start_id
	inline int getStart_id() const { return idl_CommPathNavigationGoal.start_id; }
	inline CommPathNavigationGoalCore& setStart_id(const int &start_id) { idl_CommPathNavigationGoal.start_id = start_id; return *this; }
};

} /* namespace CommRobotinoObjects */
#endif /* COMMROBOTINOOBJECTS_COMMPATHNAVIGATIONGOAL_CORE_H_ */
