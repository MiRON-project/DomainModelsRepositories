//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMROBOTINOOBJECTS_COMMPATHNAVIGATIONNODEREQUEST_CORE_H_
#define COMMROBOTINOOBJECTS_COMMPATHNAVIGATIONNODEREQUEST_CORE_H_

#include "CommRobotinoObjects/CommPathNavigationNodeRequestData.hh"
#include "CommRobotinoObjects/enumNavigationNodeRequestType.hh"
#include "CommRobotinoObjects/CommPathNode.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommRobotinoObjects {
	
class CommPathNavigationNodeRequestCore {
protected:
	// data structure
	CommRobotinoObjectsIDL::CommPathNavigationNodeRequest idl_CommPathNavigationNodeRequest;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommRobotinoObjectsIDL::CommPathNavigationNodeRequest DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommPathNavigationNodeRequestCore();
	CommPathNavigationNodeRequestCore(const DATATYPE &data);
	// default destructor
	virtual ~CommPathNavigationNodeRequestCore();
	
	const DATATYPE& get() const { return idl_CommPathNavigationNodeRequest; }
	operator const DATATYPE&() const { return idl_CommPathNavigationNodeRequest; }
	DATATYPE& set() { return idl_CommPathNavigationNodeRequest; }

	static inline std::string identifier(void) { return "CommRobotinoObjects::CommPathNavigationNodeRequest"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element RequestType
	inline CommRobotinoObjects::NavigationNodeRequestType getRequestType() const { return CommRobotinoObjects::NavigationNodeRequestType(idl_CommPathNavigationNodeRequest.requestType); }
	inline CommPathNavigationNodeRequestCore& setRequestType(const CommRobotinoObjects::NavigationNodeRequestType &requestType) { idl_CommPathNavigationNodeRequest.requestType = requestType; return *this; }
	
	// getter and setter for element NodesList
	/**
	 * Getter methods for element idl_CommPathNavigationNodeRequest.nodesList of type vector<CommRobotinoObjects::CommPathNode>
	 */
	inline std::vector<CommRobotinoObjects::CommPathNode> getNodesListCopy() const { 
		return std::vector<CommRobotinoObjects::CommPathNode>(idl_CommPathNavigationNodeRequest.nodesList.begin(), idl_CommPathNavigationNodeRequest.nodesList.end());
	}
	inline CommRobotinoObjects::CommPathNode getNodesListElemAtPos(const size_t &pos) const {
		return CommRobotinoObjects::CommPathNode(idl_CommPathNavigationNodeRequest.nodesList[pos]);
	}
	inline size_t getNodesListSize() const { return idl_CommPathNavigationNodeRequest.nodesList.size(); }
	inline bool isNodesListEmpty() const { return idl_CommPathNavigationNodeRequest.nodesList.empty(); }
	/**
	 * Setter methods for idl_CommPathNavigationNodeRequest.nodesList of type vector<CommRobotinoObjects::CommPathNode>
	 */
	inline CommPathNavigationNodeRequestCore& setNodesList(const std::vector<CommRobotinoObjects::CommPathNode> &nodesList) { 
		idl_CommPathNavigationNodeRequest.nodesList.assign(nodesList.begin(), nodesList.end());
		return *this;
	}
	inline bool setNodesListElemAtPos(const size_t &pos, const CommRobotinoObjects::CommPathNode &elem) {
		if(pos < idl_CommPathNavigationNodeRequest.nodesList.size()) {
			idl_CommPathNavigationNodeRequest.nodesList[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertNodesListVectorAtPos(const size_t &pos, const std::vector<CommRobotinoObjects::CommPathNode> &data) {
		if(pos < idl_CommPathNavigationNodeRequest.nodesList.size()) {
			idl_CommPathNavigationNodeRequest.nodesList.insert(idl_CommPathNavigationNodeRequest.nodesList.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeNodesList(const size_t &size) { idl_CommPathNavigationNodeRequest.nodesList.resize(size); }
	inline bool eraseNodesListElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommPathNavigationNodeRequest.nodesList.size() ) {
			idl_CommPathNavigationNodeRequest.nodesList.erase(idl_CommPathNavigationNodeRequest.nodesList.begin()+pos, idl_CommPathNavigationNodeRequest.nodesList.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearNodesList() { idl_CommPathNavigationNodeRequest.nodesList.clear(); }
	
	// getter and setter for element RobotID
	inline std::string getRobotID() const { return idl_CommPathNavigationNodeRequest.robotID; }
	inline CommPathNavigationNodeRequestCore& setRobotID(const std::string &robotID) { idl_CommPathNavigationNodeRequest.robotID = robotID; return *this; }
};

} /* namespace CommRobotinoObjects */
#endif /* COMMROBOTINOOBJECTS_COMMPATHNAVIGATIONNODEREQUEST_CORE_H_ */
