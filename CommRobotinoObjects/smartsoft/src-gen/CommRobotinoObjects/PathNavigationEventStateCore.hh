//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMROBOTINOOBJECTS_PATHNAVIGATIONEVENTSTATE_CORE_H_
#define COMMROBOTINOOBJECTS_PATHNAVIGATIONEVENTSTATE_CORE_H_

#include "CommRobotinoObjects/PathNavigationEventStateData.hh"
#include "CommBasicObjects/CommPosition3d.hh"
#include "CommRobotinoObjects/enumPathNavigationEventType.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommRobotinoObjects {
	
class PathNavigationEventStateCore {
protected:
	// data structure
	CommRobotinoObjectsIDL::PathNavigationEventState idl_PathNavigationEventState;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommRobotinoObjectsIDL::PathNavigationEventState DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	PathNavigationEventStateCore();
	PathNavigationEventStateCore(const DATATYPE &data);
	// default destructor
	virtual ~PathNavigationEventStateCore();
	
	const DATATYPE& get() const { return idl_PathNavigationEventState; }
	operator const DATATYPE&() const { return idl_PathNavigationEventState; }
	DATATYPE& set() { return idl_PathNavigationEventState; }

	static inline std::string identifier(void) { return "CommRobotinoObjects::PathNavigationEventState"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element NewState
	inline CommRobotinoObjects::PathNavigationEventType getNewState() const { return CommRobotinoObjects::PathNavigationEventType(idl_PathNavigationEventState.newState); }
	inline PathNavigationEventStateCore& setNewState(const CommRobotinoObjects::PathNavigationEventType &newState) { idl_PathNavigationEventState.newState = newState; return *this; }
	
	// getter and setter for element NextGoal
	inline CommBasicObjects::CommPosition3d getNextGoal() const { return CommBasicObjects::CommPosition3d(idl_PathNavigationEventState.nextGoal); }
	inline PathNavigationEventStateCore& setNextGoal(const CommBasicObjects::CommPosition3d &nextGoal) { idl_PathNavigationEventState.nextGoal = nextGoal; return *this; }
};

} /* namespace CommRobotinoObjects */
#endif /* COMMROBOTINOOBJECTS_PATHNAVIGATIONEVENTSTATE_CORE_H_ */
