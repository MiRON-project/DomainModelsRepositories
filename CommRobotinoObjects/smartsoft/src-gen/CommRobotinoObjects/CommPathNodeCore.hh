//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMROBOTINOOBJECTS_COMMPATHNODE_CORE_H_
#define COMMROBOTINOOBJECTS_COMMPATHNODE_CORE_H_

#include "CommRobotinoObjects/CommPathNodeData.hh"
#include "CommRobotinoObjects/enumNODE_TYPE.hh"
#include "CommRobotinoObjects/enumNODE_STATUS.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommRobotinoObjects {
	
class CommPathNodeCore {
protected:
	// data structure
	CommRobotinoObjectsIDL::CommPathNode idl_CommPathNode;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommRobotinoObjectsIDL::CommPathNode DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommPathNodeCore();
	CommPathNodeCore(const DATATYPE &data);
	// default destructor
	virtual ~CommPathNodeCore();
	
	const DATATYPE& get() const { return idl_CommPathNode; }
	operator const DATATYPE&() const { return idl_CommPathNode; }
	DATATYPE& set() { return idl_CommPathNode; }

	static inline std::string identifier(void) { return "CommRobotinoObjects::CommPathNode"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Id
	inline unsigned int getId() const { return idl_CommPathNode.id; }
	inline CommPathNodeCore& setId(const unsigned int &id) { idl_CommPathNode.id = id; return *this; }
	
	// getter and setter for element X
	inline double getX() const { return idl_CommPathNode.x; }
	inline CommPathNodeCore& setX(const double &x) { idl_CommPathNode.x = x; return *this; }
	
	// getter and setter for element Y
	inline double getY() const { return idl_CommPathNode.y; }
	inline CommPathNodeCore& setY(const double &y) { idl_CommPathNode.y = y; return *this; }
	
	// getter and setter for element Pose
	inline unsigned int getPose() const { return idl_CommPathNode.pose; }
	inline CommPathNodeCore& setPose(const unsigned int &pose) { idl_CommPathNode.pose = pose; return *this; }
	
	// getter and setter for element Path
	inline unsigned int getPath() const { return idl_CommPathNode.path; }
	inline CommPathNodeCore& setPath(const unsigned int &path) { idl_CommPathNode.path = path; return *this; }
	
	// getter and setter for element Type
	inline CommRobotinoObjects::NODE_TYPE getType() const { return CommRobotinoObjects::NODE_TYPE(idl_CommPathNode.type); }
	inline CommPathNodeCore& setType(const CommRobotinoObjects::NODE_TYPE &type) { idl_CommPathNode.type = type; return *this; }
	
	// getter and setter for element Sts
	inline CommRobotinoObjects::NODE_STATUS getSts() const { return CommRobotinoObjects::NODE_STATUS(idl_CommPathNode.sts); }
	inline CommPathNodeCore& setSts(const CommRobotinoObjects::NODE_STATUS &sts) { idl_CommPathNode.sts = sts; return *this; }
	
	// getter and setter for element RobotID
	inline std::string getRobotID() const { return idl_CommPathNode.robotID; }
	inline CommPathNodeCore& setRobotID(const std::string &robotID) { idl_CommPathNode.robotID = robotID; return *this; }
};

} /* namespace CommRobotinoObjects */
#endif /* COMMROBOTINOOBJECTS_COMMPATHNODE_CORE_H_ */
