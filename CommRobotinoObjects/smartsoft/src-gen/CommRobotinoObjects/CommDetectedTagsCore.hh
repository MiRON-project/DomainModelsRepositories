//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMROBOTINOOBJECTS_COMMDETECTEDTAGS_CORE_H_
#define COMMROBOTINOOBJECTS_COMMDETECTEDTAGS_CORE_H_

#include "CommRobotinoObjects/CommDetectedTagsData.hh"
#include "CommRobotinoObjects/CommVisualTag.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommRobotinoObjects {
	
class CommDetectedTagsCore {
protected:
	// data structure
	CommRobotinoObjectsIDL::CommDetectedTags idl_CommDetectedTags;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommRobotinoObjectsIDL::CommDetectedTags DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommDetectedTagsCore();
	CommDetectedTagsCore(const DATATYPE &data);
	// default destructor
	virtual ~CommDetectedTagsCore();
	
	const DATATYPE& get() const { return idl_CommDetectedTags; }
	operator const DATATYPE&() const { return idl_CommDetectedTags; }
	DATATYPE& set() { return idl_CommDetectedTags; }

	static inline std::string identifier(void) { return "CommRobotinoObjects::CommDetectedTags"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Tags
	/**
	 * Getter methods for element idl_CommDetectedTags.tags of type vector<CommRobotinoObjects::CommVisualTag>
	 */
	inline std::vector<CommRobotinoObjects::CommVisualTag> getTagsCopy() const { 
		return std::vector<CommRobotinoObjects::CommVisualTag>(idl_CommDetectedTags.tags.begin(), idl_CommDetectedTags.tags.end());
	}
	inline CommRobotinoObjects::CommVisualTag getTagsElemAtPos(const size_t &pos) const {
		return CommRobotinoObjects::CommVisualTag(idl_CommDetectedTags.tags[pos]);
	}
	inline size_t getTagsSize() const { return idl_CommDetectedTags.tags.size(); }
	inline bool isTagsEmpty() const { return idl_CommDetectedTags.tags.empty(); }
	/**
	 * Setter methods for idl_CommDetectedTags.tags of type vector<CommRobotinoObjects::CommVisualTag>
	 */
	inline CommDetectedTagsCore& setTags(const std::vector<CommRobotinoObjects::CommVisualTag> &tags) { 
		idl_CommDetectedTags.tags.assign(tags.begin(), tags.end());
		return *this;
	}
	inline bool setTagsElemAtPos(const size_t &pos, const CommRobotinoObjects::CommVisualTag &elem) {
		if(pos < idl_CommDetectedTags.tags.size()) {
			idl_CommDetectedTags.tags[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertTagsVectorAtPos(const size_t &pos, const std::vector<CommRobotinoObjects::CommVisualTag> &data) {
		if(pos < idl_CommDetectedTags.tags.size()) {
			idl_CommDetectedTags.tags.insert(idl_CommDetectedTags.tags.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeTags(const size_t &size) { idl_CommDetectedTags.tags.resize(size); }
	inline bool eraseTagsElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommDetectedTags.tags.size() ) {
			idl_CommDetectedTags.tags.erase(idl_CommDetectedTags.tags.begin()+pos, idl_CommDetectedTags.tags.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearTags() { idl_CommDetectedTags.tags.clear(); }
	
	// getter and setter for element Valid
	inline bool getValid() const { return idl_CommDetectedTags.valid; }
	inline CommDetectedTagsCore& setValid(const bool &valid) { idl_CommDetectedTags.valid = valid; return *this; }
};

} /* namespace CommRobotinoObjects */
#endif /* COMMROBOTINOOBJECTS_COMMDETECTEDTAGS_CORE_H_ */
