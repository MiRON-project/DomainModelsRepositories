//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommRobotinoObjects/CommPathFreeAreaACE.hh"
#include <ace/SString.h>

// serialization operator for element CommPathFreeArea
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommRobotinoObjectsIDL::CommPathFreeArea &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element areaID
	good_bit = good_bit && cdr.write_long(data.areaID);
	// serialize list-element maxOccupancy
	good_bit = good_bit && cdr.write_long(data.maxOccupancy);
	// serialize list-element robotIDs
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.robotIDs.size());
	good_bit = good_bit && cdr.write_long_array(data.robotIDs.data(), data.robotIDs.size());
	// serialize list-element nodeXvector
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.nodeXvector.size());
	good_bit = good_bit && cdr.write_double_array(data.nodeXvector.data(), data.nodeXvector.size());
	// serialize list-element nodeYvector
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.nodeYvector.size());
	good_bit = good_bit && cdr.write_double_array(data.nodeYvector.data(), data.nodeYvector.size());
	
	return good_bit;
}

// de-serialization operator for element CommPathFreeArea
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommRobotinoObjectsIDL::CommPathFreeArea &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element areaID
	good_bit = good_bit && cdr.read_long(data.areaID);
	// deserialize type element maxOccupancy
	good_bit = good_bit && cdr.read_long(data.maxOccupancy);
	// deserialize list-type element robotIDs
	ACE_CDR::ULong data_robotIDsNbr;
	good_bit = good_bit && cdr >> data_robotIDsNbr;
	data.robotIDs.resize(data_robotIDsNbr);
	good_bit = good_bit && cdr.read_long_array(data.robotIDs.data(), data_robotIDsNbr);
	// deserialize list-type element nodeXvector
	ACE_CDR::ULong data_nodeXvectorNbr;
	good_bit = good_bit && cdr >> data_nodeXvectorNbr;
	data.nodeXvector.resize(data_nodeXvectorNbr);
	good_bit = good_bit && cdr.read_double_array(data.nodeXvector.data(), data_nodeXvectorNbr);
	// deserialize list-type element nodeYvector
	ACE_CDR::ULong data_nodeYvectorNbr;
	good_bit = good_bit && cdr >> data_nodeYvectorNbr;
	data.nodeYvector.resize(data_nodeYvectorNbr);
	good_bit = good_bit && cdr.read_double_array(data.nodeYvector.data(), data_nodeYvectorNbr);
	
	return good_bit;
}

// serialization operator for CommunicationObject CommPathFreeArea
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommRobotinoObjects::CommPathFreeArea &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject CommPathFreeArea
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommRobotinoObjects::CommPathFreeArea &obj)
{
	return cdr >> obj.set();
}
