//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2012 Matthias Lutz
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Library".
//  It provides standardized patterns for communication between
//  different components.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//
//  (partly based on joint work with Robert WÃ¶rz)
//
// --------------------------------------------------------------------------

#include "CommRobotinoObjects/CommRobotinoDockingEventResult.hh"

#include <cstring>

using namespace CommRobotinoObjects;

CommRobotinoDockingEventResult::CommRobotinoDockingEventResult()
:	CommRobotinoDockingEventResultCore()
{  }


/**
 * Constructor to set all values.
 * NOTE that you have to keep this constructor consistent with the model!
 * Use  at your own choice.
 *
 * The preferred way to set values for initialization is:
 *      CommRepository::MyCommObject obj;
 *      obj.setX(1).setY(2).setZ(3)...;
CommRobotinoDockingEventResult::CommRobotinoDockingEventResult(const CommRobotinoObjects::RobotinoDockingEventType &state)
:	CommRobotinoDockingEventResultCore() // base constructor sets default values as defined in the model
{
	setState(state);
}
 */

#include <iostream>

using namespace CommRobotinoObjects;

void CommRobotinoDockingEventResult::set(RobotinoDockingEventType r)
{
  setState(r);
}

void CommRobotinoDockingEventResult::get(RobotinoDockingEventType& r) const
{
  r = getState();
}


//TODO CHECK THIS!
void CommRobotinoDockingEventResult::get(char* r)const
{
  switch(idl_CommRobotinoDockingEventResult.state) {
    case RobotinoDockingEventType::DOCKING_UNKNOWN:
      strcpy(r,"(unknown)");
      break;
    case RobotinoDockingEventType::IR_DOCKING_DONE:
      strcpy(r,"(ir docking done)");
      break;
    case RobotinoDockingEventType::IR_DOCKING_NOT_DONE:
      strcpy(r,"(ir docking not done)");
      break;
    case RobotinoDockingEventType::LASER_DOCKING_DONE:
      strcpy(r,"(laser docking done)");
      break;
    case RobotinoDockingEventType::LASER_DOCKING_NOT_DONE:
      strcpy(r,"(laser docking not done)");
      break;
    case RobotinoDockingEventType::LASER_DOCKING_ERROR:
      strcpy(r,"(laser docking error)");
      break;
    case RobotinoDockingEventType::IR_DOCKING_ERROR:
      strcpy(r,"(ir docking error)");
      break;
    case RobotinoDockingEventType::UN_DOCKING_NOT_DONE:
      strcpy(r,"(undocking not done)");
      break;
    case RobotinoDockingEventType::UN_DOCKING_DONE:
	  strcpy(r,"(undocking done)");
	  break;
    case RobotinoDockingEventType::UN_DOCKING_ERROR:
	  strcpy(r,"(undocking error)");
	  break;
    default:
      strcpy(r,"(error)");
      break;
  }
}



void CommRobotinoDockingEventResult::print(void)
{
 std::cout<< "RobotinoDockingEventType - state: " << getState() << "\n";
}

CommRobotinoDockingEventResult::CommRobotinoDockingEventResult(const CommRobotinoDockingEventResultCore &commRobotinoDockingEventResult)
:	CommRobotinoDockingEventResultCore(commRobotinoDockingEventResult)
{  }

CommRobotinoDockingEventResult::CommRobotinoDockingEventResult(const DATATYPE &commRobotinoDockingEventResult)
:	CommRobotinoDockingEventResultCore(commRobotinoDockingEventResult)
{  }

CommRobotinoDockingEventResult::~CommRobotinoDockingEventResult()
{  }
