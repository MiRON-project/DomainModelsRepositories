//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMROBOTINOOBJECTS_COMMVISUALTAG_H_
#define COMMROBOTINOOBJECTS_COMMVISUALTAG_H_

#include "CommRobotinoObjects/CommVisualTagCore.hh"
#include "armadillo.hh"
#include "EulerTransformationMatrices.hh"

namespace CommRobotinoObjects {
		
class CommVisualTag : public CommVisualTagCore {
	public:
		// default constructors
		CommVisualTag();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommVisualTag(const int &tagID, const CommBasicObjects::CommPose3d &tagPose, const CommBasicObjects::CommBaseState &base_state, const CommBasicObjects::CommPose3d &sensor_pose);
		
		CommVisualTag(const CommVisualTagCore &commVisualTag);
		CommVisualTag(const DATATYPE &commVisualTag);
		virtual ~CommVisualTag();
		
		// use framework specific getter and setter methods from core (base) class
		using CommVisualTagCore::get;
		using CommVisualTagCore::set;
		

		inline CommBasicObjects::CommPose3d get_tag_pose_sensor() const
		{
			return getTagPose();
		}

		inline CommBasicObjects::CommPose3d get_tag_pose_robot() const
		{
			arma::mat sensorPose = getSensor_pose().getHomogeneousMatrix(1.0);
			arma::mat measurment = getTagPose().getHomogeneousMatrix(1.0);

			arma::mat offset = sensorPose * measurment;
			return CommBasicObjects::CommPose3d(offset,1.0);

		}

		inline CommBasicObjects::CommPose3d get_tag_pose_world() const
		{
			arma::mat sensorPose = getSensor_pose().getHomogeneousMatrix(1.0);
			arma::mat robotPose = getBase_state().getBasePose().getPose3D().getHomogeneousMatrix(1.0);
			arma::mat measurment = getTagPose().getHomogeneousMatrix(1.0);

			arma::mat offset = robotPose * sensorPose * measurment;
			return CommBasicObjects::CommPose3d(offset,1.0);
		}

		//
		// feel free to add customized methods here
		//
};

inline std::ostream &operator<<(std::ostream &os, const CommVisualTag &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace CommRobotinoObjects */
#endif /* COMMROBOTINOOBJECTS_COMMVISUALTAG_H_ */
