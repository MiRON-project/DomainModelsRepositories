//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

#include "CommRobotinoObjects/CommPathNavigationEventResult.hh"
#include <iomanip>
#include <cstring>

using namespace CommRobotinoObjects;

CommPathNavigationEventResult::CommPathNavigationEventResult()
:	CommPathNavigationEventResultCore()
{  }


/**
 * Constructor to set all values.
 * NOTE that you have to keep this constructor consistent with the model!
 * Use  at your own choice.
 *
 * The preferred way to set values for initialization is:
 *      CommRepository::MyCommObject obj;
 *      obj.setX(1).setY(2).setZ(3)...;
CommPathNavigationEventResult::CommPathNavigationEventResult(const CommRobotinoObjects::PathNavigationEventType &state, const CommBasicObjects::CommPosition3d &nextGoal)
:	CommPathNavigationEventResultCore() // base constructor sets default values as defined in the model
{
	setState(state);
	setNextGoal(nextGoal);
}
 */

CommPathNavigationEventResult::CommPathNavigationEventResult(const CommPathNavigationEventResultCore &commPathNavigationEventResult)
:	CommPathNavigationEventResultCore(commPathNavigationEventResult)
{  }

CommPathNavigationEventResult::CommPathNavigationEventResult(const DATATYPE &commPathNavigationEventResult)
:	CommPathNavigationEventResultCore(commPathNavigationEventResult)
{  }

CommPathNavigationEventResult::~CommPathNavigationEventResult()
{  }

void CommPathNavigationEventResult::get(char* r)const
{
  std::stringstream tmp;
  switch(idl_CommPathNavigationEventResult.state) {
    case PathNavigationEventType::GOAL_UNKNOWN:
      strcpy(r,"(unknown)");
      break;
    case PathNavigationEventType::GOAL_REACHED:
      strcpy(r,"(reached)");
      break;
    case PathNavigationEventType::GOAL_NOT_REACHED:
      strcpy(r,"(notreached)");
      break;
    case PathNavigationEventType::START_TOO_FAR:
      tmp << "(starttoofar " << std::setprecision(0) << this->getNextGoal().getX() << " " << this->getNextGoal().getY() << " )";
	  strcpy(r,tmp.str().c_str());
	  break;
    case PathNavigationEventType::NO_PATH_FOUND:
	  strcpy(r,"(nopath)");
	  break;
    case PathNavigationEventType::FATAL_ERROR:
      strcpy(r,"(fatal error)");
      break;
    default:
      strcpy(r,"(error)");
      break;
  }
}
