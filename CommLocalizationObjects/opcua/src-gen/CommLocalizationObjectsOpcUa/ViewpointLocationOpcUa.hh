//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "CommLocalizationObjects/ViewpointLocation.hh"
#include <SeRoNet/CommunicationObjects/Description/SelfDescription.hpp>
#include <SeRoNet/CommunicationObjects/Description/ElementPrimitives.hpp>
#pragma once

#include "CommLocalizationObjects/CPose2DOpcUa.hh"
#include "CommLocalizationObjects/CMatrixDouble22OpcUa.hh"
#include "CommLocalizationObjects/CMatrixDouble22OpcUa.hh"

namespace SeRoNet {
namespace CommunicationObjects {
namespace Description {
// serialization for ViewpointLocation
template <>
ComplexType::shp_t SelfDescription(CommLocalizationObjects::ViewpointLocation *obj, std::string name)
{
	auto ret = std::make_shared<SeRoNet::CommunicationObjects::Description::ComplexType>(name);
	/// \todo check for ComplexObjects
	// add id
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementInt32(
				"id",
				std::bind(&CommLocalizationObjects::ViewpointLocation::getId, obj),
				std::bind(&CommLocalizationObjects::ViewpointLocation::setId, obj, std::placeholders::_1)
			)
		)
	);
	ret->add(
		SelfDescription(&(obj->getMean()), "CPose2D")
	);
	ret->add(
		SelfDescription(&(obj->getCov()), "CMatrixDouble22")
	);
	ret->add(
		SelfDescription(&(obj->getInvCov()), "CMatrixDouble22")
	);
	// add observationCount
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementInt32(
				"observationCount",
				std::bind(&CommLocalizationObjects::ViewpointLocation::getObservationCount, obj),
				std::bind(&CommLocalizationObjects::ViewpointLocation::setObservationCount, obj, std::placeholders::_1)
			)
		)
	);
	// add possibleObservations
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementInt32(
				"possibleObservations",
				std::bind(&CommLocalizationObjects::ViewpointLocation::getPossibleObservations, obj),
				std::bind(&CommLocalizationObjects::ViewpointLocation::setPossibleObservations, obj, std::placeholders::_1)
			)
		)
	);
	return ret;
} // end SelfDescription
} // end namespace Description
} // end namespace CommunicationObjects
} // end namespace SeRoNet
