//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2012 Matthias Lutz
//
//        schlegel@hs-ulm.de
//        lutz@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------




#include "DomainForklift/CommForkliftEventResult.hh"

#include <iostream>
#include <string>
#include <cstring>
#include <list>

using namespace DomainForklift;

CommForkliftEventResult::CommForkliftEventResult()
:	CommForkliftEventResultCore()
{  }


/**
 * Constructor to set all values.
 * NOTE that you have to keep this constructor consistent with the model!
 * Use  at your own choice.
 *
 * The preferred way to set values for initialization is:
 *      CommRepository::MyCommObject obj;
 *      obj.setX(1).setY(2).setZ(3)...;
CommForkliftEventResult::CommForkliftEventResult(const DomainForklift::ForkliftEventType &state)
:	CommForkliftEventResultCore() // base constructor sets default values as defined in the model
{
	setState(state);
}
 */

CommForkliftEventResult::CommForkliftEventResult(const CommForkliftEventResultCore &commForkliftEventResult)
:	CommForkliftEventResultCore(commForkliftEventResult)
{  }

CommForkliftEventResult::CommForkliftEventResult(const DATATYPE &commForkliftEventResult)
:	CommForkliftEventResultCore(commForkliftEventResult)
{  }

CommForkliftEventResult::~CommForkliftEventResult()
{  }


void CommForkliftEventResult::set(ForkliftEventType r)
{
	idl_CommForkliftEventResult.state = r;
}

void CommForkliftEventResult::get(ForkliftEventType& r) const
{
  r = idl_CommForkliftEventResult.state;
}

void CommForkliftEventResult::get(char* r)const
{
  switch(idl_CommForkliftEventResult.state) {
    case ForkliftEventType::FORKLIFT_GOAL_UNKNOWN:
      strcpy(r,"(unknown)");
      break;
    case ForkliftEventType::FORKLIFT_GOAL_REACHED:
      strcpy(r,"(reached)");
      break;
    case ForkliftEventType::FORKLIFT_GOAL_NOT_REACHED:
      strcpy(r,"(notreached)");
      break;
    default:
      strcpy(r,"(error)");
      break;
  }
}

void CommForkliftEventResult::print(std::ostream &os) const
{
  os << "Result : " << idl_CommForkliftEventResult.state << std::endl;
}
