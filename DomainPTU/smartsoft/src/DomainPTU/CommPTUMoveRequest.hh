//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
//  Copyright (C) 2018 Servicerobotik Ulm
//
//  Service Robotics Research Center
//  University of Applied Sciences Ulm
//  Prittwitzstr. 10
//  89075 Ulm (Germany)
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------


#ifndef DOMAINPTU_COMMPTUMOVEREQUEST_H_
#define DOMAINPTU_COMMPTUMOVEREQUEST_H_

#include "DomainPTU/CommPTUMoveRequestCore.hh"

namespace DomainPTU {
		
class CommPTUMoveRequest : public CommPTUMoveRequestCore {
	public:
		// default constructors
		CommPTUMoveRequest();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommPTUMoveRequest(const double &pan, const double &tilt, const CommBasicObjects::CommPosition3d &point, const DomainPTU::PTUMoveFlag &flag);
		
		CommPTUMoveRequest(const CommPTUMoveRequestCore &commPTUMoveRequest);
		CommPTUMoveRequest(const DATATYPE &commPTUMoveRequest);
		virtual ~CommPTUMoveRequest();
		
		// use framework specific getter and setter methods from core (base) class
		using CommPTUMoveRequestCore::get;
		using CommPTUMoveRequestCore::set;
		
		//
		// feel free to add customized methods here
		//

		inline PTUMoveFlag getFlag() const
		{
			return idl_CommPTUMoveRequest.flag;
		}
		inline void setFlag(const PTUMoveFlag &flag)
		{
			idl_CommPTUMoveRequest.flag = flag;
		}

		inline double getPan() const
		{
			return idl_CommPTUMoveRequest.pan;
		}
		inline void setPan(const double &pan)
		{
			idl_CommPTUMoveRequest.pan = pan;
		}

		inline CommBasicObjects::CommPosition3d getPoint() const
		{
			return CommBasicObjects::CommPosition3d(idl_CommPTUMoveRequest.point);
		}
		inline void setPoint(const CommBasicObjects::CommPosition3d &point)
		{
			idl_CommPTUMoveRequest.point = point;
		}

		inline double getTilt() const
		{
			return idl_CommPTUMoveRequest.tilt;
		}
		inline void setTilt(const double &tilt)
		{
			idl_CommPTUMoveRequest.tilt = tilt;
		}

		//
		// add your customized interface here
		//

		/**
		 * Translate the PTUMoveFlag enum to a string representation.
		 */
		static std::string modeToString(PTUMoveFlag flag);


		/**
		 * Set the pan angle in rad.
		 */
		inline void set_pan(double angle) {
			idl_CommPTUMoveRequest.pan = angle;
		}

		/**
		 * Returns the pan angle in rad.
		 */
		inline double get_pan() const {
			return idl_CommPTUMoveRequest.pan;
		}

		/**
		 * Set the tilt angle in rad.
		 */
		inline void set_tilt(double angle) {
			idl_CommPTUMoveRequest.tilt = angle;
		}

		/**
		 * Returns the tilt angle in rad.
		 */
		inline double get_tilt() const {
			return idl_CommPTUMoveRequest.tilt;
		}

		/**
		 * Set the position the ptu unit should look at. The position can be in
		 * world or robot coordinate system as specified by the move mode.
		 * The unit is by default in mm.
		 */
		inline void set_position(double x, double y, double z, const double unit = 0.001) {
			idl_CommPTUMoveRequest.point.x = x * unit * 1000;
			idl_CommPTUMoveRequest.point.y = y * unit * 1000;
			idl_CommPTUMoveRequest.point.z = z * unit * 1000;
		}

		/**
		 * Returns the position the ptu unit should look at. The position can be in
		 * world or robot coordinate system as specified by the move mode.
		 * The unit is by default in mm.
		 */
		inline void get_position(double& x, double& y, double& z, const double unit = 0.001) const {
			x = idl_CommPTUMoveRequest.point.x * 0.001 / unit;
			y = idl_CommPTUMoveRequest.point.y * 0.001 / unit;
			z = idl_CommPTUMoveRequest.point.z * 0.001 / unit;
		}

		/**
		 * Define which values of the communication object should be used for
		 * moving the ptu.
		 */
		inline void set_move_mode(PTUMoveFlag flag) {
			idl_CommPTUMoveRequest.flag = flag;
		}

		/**
		 * Returns the flag that inidcates which values of the communication object
		 * should be used for moving the ptu.
		 */
		inline PTUMoveFlag get_move_mode() const {
			return idl_CommPTUMoveRequest.flag;
		}

		/**
		 * Print the object to an output stream.
		 * @param os Output stream to which should be printed
		 */
		void print(std::ostream &os = std::cout) const;
};

inline std::ostream &operator<<(std::ostream &os, const CommPTUMoveRequest &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace DomainPTU */
#endif /* DOMAINPTU_COMMPTUMOVEREQUEST_H_ */
