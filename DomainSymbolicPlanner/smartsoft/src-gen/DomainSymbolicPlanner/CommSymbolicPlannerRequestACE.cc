//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "DomainSymbolicPlanner/CommSymbolicPlannerRequestACE.hh"
#include <ace/SString.h>

// serialization operator for element CommSymbolicPlannerRequest
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const DomainSymbolicPlannerIDL::CommSymbolicPlannerRequest &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element plannertype
	good_bit = good_bit && cdr << ACE_CString(data.plannertype.c_str());
	// serialize list-element domaindescription
	good_bit = good_bit && cdr << ACE_CString(data.domaindescription.c_str());
	// serialize list-element factdescription
	good_bit = good_bit && cdr << ACE_CString(data.factdescription.c_str());
	
	return good_bit;
}

// de-serialization operator for element CommSymbolicPlannerRequest
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, DomainSymbolicPlannerIDL::CommSymbolicPlannerRequest &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize string-type element plannertype
	ACE_CString data_plannertype_str;
	good_bit = good_bit && cdr >> data_plannertype_str;
	data.plannertype = data_plannertype_str.c_str();
	// deserialize string-type element domaindescription
	ACE_CString data_domaindescription_str;
	good_bit = good_bit && cdr >> data_domaindescription_str;
	data.domaindescription = data_domaindescription_str.c_str();
	// deserialize string-type element factdescription
	ACE_CString data_factdescription_str;
	good_bit = good_bit && cdr >> data_factdescription_str;
	data.factdescription = data_factdescription_str.c_str();
	
	return good_bit;
}

// serialization operator for CommunicationObject CommSymbolicPlannerRequest
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const DomainSymbolicPlanner::CommSymbolicPlannerRequest &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject CommSymbolicPlannerRequest
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, DomainSymbolicPlanner::CommSymbolicPlannerRequest &obj)
{
	return cdr >> obj.set();
}
