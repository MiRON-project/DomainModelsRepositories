//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "CommBasicObjects/CommIMUData.hh"
#include <SeRoNet/CommunicationObjects/Description/SelfDescription.hpp>
#include <SeRoNet/CommunicationObjects/Description/ElementPrimitives.hpp>
#pragma once


namespace SeRoNet {
namespace CommunicationObjects {
namespace Description {
// serialization for CommIMUData
template <>
ComplexType::shp_t SelfDescription(CommBasicObjects::CommIMUData *obj, std::string name)
{
	auto ret = std::make_shared<SeRoNet::CommunicationObjects::Description::ComplexType>(name);
	/// \todo check for ComplexObjects
	// add timestamp
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementUInt16(
				"timestamp",
				std::bind(&CommBasicObjects::CommIMUData::getTimestamp, obj),
				std::bind(&CommBasicObjects::CommIMUData::setTimestamp, obj, std::placeholders::_1)
			)
		)
	);
	// add temperature
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementDouble(
				"temperature",
				std::bind(&CommBasicObjects::CommIMUData::getTemperature, obj),
				std::bind(&CommBasicObjects::CommIMUData::setTemperature, obj, std::placeholders::_1)
			)
		)
	);
	// add accelerometer_x
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementDouble(
				"accelerometer_x",
				std::bind(&CommBasicObjects::CommIMUData::getAccelerometer_x, obj),
				std::bind(&CommBasicObjects::CommIMUData::setAccelerometer_x, obj, std::placeholders::_1)
			)
		)
	);
	// add accelerometer_y
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementDouble(
				"accelerometer_y",
				std::bind(&CommBasicObjects::CommIMUData::getAccelerometer_y, obj),
				std::bind(&CommBasicObjects::CommIMUData::setAccelerometer_y, obj, std::placeholders::_1)
			)
		)
	);
	// add accelerometer_z
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementDouble(
				"accelerometer_z",
				std::bind(&CommBasicObjects::CommIMUData::getAccelerometer_z, obj),
				std::bind(&CommBasicObjects::CommIMUData::setAccelerometer_z, obj, std::placeholders::_1)
			)
		)
	);
	// add gyroscope_x
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementDouble(
				"gyroscope_x",
				std::bind(&CommBasicObjects::CommIMUData::getGyroscope_x, obj),
				std::bind(&CommBasicObjects::CommIMUData::setGyroscope_x, obj, std::placeholders::_1)
			)
		)
	);
	// add gyroscope_y
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementDouble(
				"gyroscope_y",
				std::bind(&CommBasicObjects::CommIMUData::getGyroscope_y, obj),
				std::bind(&CommBasicObjects::CommIMUData::setGyroscope_y, obj, std::placeholders::_1)
			)
		)
	);
	// add gyroscope_z
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementDouble(
				"gyroscope_z",
				std::bind(&CommBasicObjects::CommIMUData::getGyroscope_z, obj),
				std::bind(&CommBasicObjects::CommIMUData::setGyroscope_z, obj, std::placeholders::_1)
			)
		)
	);
	// add magnetometer_x
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementDouble(
				"magnetometer_x",
				std::bind(&CommBasicObjects::CommIMUData::getMagnetometer_x, obj),
				std::bind(&CommBasicObjects::CommIMUData::setMagnetometer_x, obj, std::placeholders::_1)
			)
		)
	);
	// add magnetometer_y
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementDouble(
				"magnetometer_y",
				std::bind(&CommBasicObjects::CommIMUData::getMagnetometer_y, obj),
				std::bind(&CommBasicObjects::CommIMUData::setMagnetometer_y, obj, std::placeholders::_1)
			)
		)
	);
	// add magnetometer_z
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementDouble(
				"magnetometer_z",
				std::bind(&CommBasicObjects::CommIMUData::getMagnetometer_z, obj),
				std::bind(&CommBasicObjects::CommIMUData::setMagnetometer_z, obj, std::placeholders::_1)
			)
		)
	);
	// add roll
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementDouble(
				"roll",
				std::bind(&CommBasicObjects::CommIMUData::getRoll, obj),
				std::bind(&CommBasicObjects::CommIMUData::setRoll, obj, std::placeholders::_1)
			)
		)
	);
	// add pitch
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementDouble(
				"pitch",
				std::bind(&CommBasicObjects::CommIMUData::getPitch, obj),
				std::bind(&CommBasicObjects::CommIMUData::setPitch, obj, std::placeholders::_1)
			)
		)
	);
	// add yaw
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementDouble(
				"yaw",
				std::bind(&CommBasicObjects::CommIMUData::getYaw, obj),
				std::bind(&CommBasicObjects::CommIMUData::setYaw, obj, std::placeholders::_1)
			)
		)
	);
	return ret;
} // end SelfDescription
} // end namespace Description
} // end namespace CommunicationObjects
} // end namespace SeRoNet
