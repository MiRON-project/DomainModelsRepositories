//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "CommBasicObjects/CommLaserScan.hh"
#include <SeRoNet/CommunicationObjects/Description/SelfDescription.hpp>
#include <SeRoNet/CommunicationObjects/Description/ElementPrimitives.hpp>
#pragma once

#include "CommBasicObjects/CommTimeStampOpcUa.hh"
#include "CommBasicObjects/LaserScanPointOpcUa.hh"

namespace SeRoNet {
namespace CommunicationObjects {
namespace Description {
// serialization for CommLaserScan
template <>
ComplexType::shp_t SelfDescription(CommBasicObjects::CommLaserScan *obj, std::string name)
{
	auto ret = std::make_shared<SeRoNet::CommunicationObjects::Description::ComplexType>(name);
	/// \todo check for ComplexObjects
	// add is_valid
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementBool(
				"is_valid",
				std::bind(&CommBasicObjects::CommLaserScan::getIs_valid, obj),
				std::bind(&CommBasicObjects::CommLaserScan::setIs_valid, obj, std::placeholders::_1)
			)
		)
	);
	ret->add(
		SelfDescription(&(obj->getTime()), "CommTimeStamp")
	);
	// add update_count
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementUInt64(
				"update_count",
				std::bind(&CommBasicObjects::CommLaserScan::getUpdate_count, obj),
				std::bind(&CommBasicObjects::CommLaserScan::setUpdate_count, obj, std::placeholders::_1)
			)
		)
	);
	// add start_angle
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementDouble(
				"start_angle",
				std::bind(&CommBasicObjects::CommLaserScan::getStart_angle, obj),
				std::bind(&CommBasicObjects::CommLaserScan::setStart_angle, obj, std::placeholders::_1)
			)
		)
	);
	// add resolution
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementDouble(
				"resolution",
				std::bind(&CommBasicObjects::CommLaserScan::getResolution, obj),
				std::bind(&CommBasicObjects::CommLaserScan::setResolution, obj, std::placeholders::_1)
			)
		)
	);
	// add distance_min
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementUInt16(
				"distance_min",
				std::bind(&CommBasicObjects::CommLaserScan::getDistance_min, obj),
				std::bind(&CommBasicObjects::CommLaserScan::setDistance_min, obj, std::placeholders::_1)
			)
		)
	);
	// add distance_max
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementUInt16(
				"distance_max",
				std::bind(&CommBasicObjects::CommLaserScan::getDistance_max, obj),
				std::bind(&CommBasicObjects::CommLaserScan::setDistance_max, obj, std::placeholders::_1)
			)
		)
	);
	// add length_unit
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementUInt16(
				"length_unit",
				std::bind(&CommBasicObjects::CommLaserScan::getLength_unit, obj),
				std::bind(&CommBasicObjects::CommLaserScan::setLength_unit, obj, std::placeholders::_1)
			)
		)
	);
	ret->add(
		SelfDescription(&(obj->getScan_points()), "LaserScanPoint")
	);
	// add max_scan_points
	ret->add(
		SeRoNet::CommunicationObjects::Description::IDescription::shp_t(
			new SeRoNet::CommunicationObjects::Description::ElementUInt16(
				"max_scan_points",
				std::bind(&CommBasicObjects::CommLaserScan::getMax_scan_points, obj),
				std::bind(&CommBasicObjects::CommLaserScan::setMax_scan_points, obj, std::placeholders::_1)
			)
		)
	);
	return ret;
} // end SelfDescription
} // end namespace Description
} // end namespace CommunicationObjects
} // end namespace SeRoNet
