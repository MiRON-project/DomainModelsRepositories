//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMOBJECTRECOGNITIONOBJECTS_COMMOBJECTRECOGNITIONEVENTRESULT_H_
#define COMMOBJECTRECOGNITIONOBJECTS_COMMOBJECTRECOGNITIONEVENTRESULT_H_

#include "CommObjectRecognitionObjects/CommObjectRecognitionEventResultCore.hh"

#include <iomanip>

namespace CommObjectRecognitionObjects {
		
class CommObjectRecognitionEventResult : public CommObjectRecognitionEventResultCore {
	public:
		// default constructors
		CommObjectRecognitionEventResult();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommObjectRecognitionEventResult(const CommObjectRecognitionObjects::ObjectRecognitionState &state, const std::vector<unsigned int> &object_id, const unsigned int &environment_id = 0);
		
		CommObjectRecognitionEventResult(const CommObjectRecognitionEventResultCore &commObjectRecognitionEventResult);
		CommObjectRecognitionEventResult(const DATATYPE &commObjectRecognitionEventResult);
		virtual ~CommObjectRecognitionEventResult();
		
		// use framework specific getter and setter methods from core (base) class
		using CommObjectRecognitionEventResultCore::get;
		using CommObjectRecognitionEventResultCore::set;
		
		//
		// feel free to add customized methods here
		//

		//		inline ObjectRecognitionBehavior getBehavior() const
		//		{
		//			return idl_CommObjectRecognitionEventResult.behavior;
		//		}
		//		inline void setBehavior(const ObjectRecognitionBehavior &behavior)
		//		{
		//			idl_CommObjectRecognitionEventResult.behavior = behavior;
		//		}

				inline unsigned int getEnvironment_id() const
				{
					return idl_CommObjectRecognitionEventResult.environment_id;
				}
				inline void setEnvironment_id(const unsigned int &environment_id)
				{
					idl_CommObjectRecognitionEventResult.environment_id = environment_id;
				}

				inline std::vector<unsigned int>& getObject_idRef()
				{
					return idl_CommObjectRecognitionEventResult.object_id;
				}

				inline ObjectRecognitionState getState() const
				{
					return idl_CommObjectRecognitionEventResult.state;
				}
				inline void setState(const ObjectRecognitionState &state)
				{
					idl_CommObjectRecognitionEventResult.state = state;
				}

				//
				// add your customized interface here
				//


				/**
				 * Get the object as a lisp representation.
				 * ((behaviour ?b) (state ?s) (id ?id))
				 */
				void get(std::string &str) const {
					std::stringstream stream;

					stream << std::setprecision(0) << std::fixed;

		//			switch (idl_CommObjectRecognitionEventResult.behavior) {
		//			case ObjectRecognitionBehavior::SEARCH:
		//				stream << "((behaviour search)";
		//				break;
		//			case ObjectRecognitionBehavior::FULLSEARCH:
		//				stream << "((behaviour fullsearch)";
		//				break;
		//			case ObjectRecognitionBehavior::UNSET:
		//				stream << "((behaviour unset)";
		//				break;
		//			case ObjectRecognitionBehavior::CLUSTERING_OFF:
		//				stream << "((behaviour clusteringoff)";
		//				break;
		//			case ObjectRecognitionBehavior::CLUSTERING_ON:
		//				stream << "((behaviour clusteringon)";
		//				break;
		//			case ObjectRecognitionBehavior::ESTIMATEFILLING_ON:
		//				stream << "((behaviour estimatefillingon)";
		//				break;
		//			case ObjectRecognitionBehavior::ESTIMATEFILLING_OFF:
		//				stream << "((behaviour estimatefillingoff)";
		//				break;
		//			}

					switch (idl_CommObjectRecognitionEventResult.state) {
					case ObjectRecognitionState::VISIBLE:
						stream << "(state visible)";
						break;
					case ObjectRecognitionState::INVISIBLE:
						stream << "(state invisible)";
						break;
					case ObjectRecognitionState::FINISHED:
						stream << "(state finished)";
						break;
					}

					stream << "(id ";
					for (size_t i = 0; i < get_object_id_size(); ++i) {
						stream << idl_CommObjectRecognitionEventResult.object_id[i] << " ";
					}
					stream << "))";

					str = stream.str();
				}

				/**
				 * Set the current behavior.
				 * 		fullsearch = return all objects found in the scene, although obstacles.
				 * 		search = search only until the first object is found.
				 * 		unset = not specified.
				 */
		//		inline void set_behavior(ObjectRecognitionBehavior behavior) {
		//			idl_CommObjectRecognitionEventResult.behavior = behavior;
		//		}

				/**
				 * Get the current behavior.
				 * 		fullsearch = return all objects found in the scene, although obstacles.
				 * 		search = search only until the first object is found.
				 * 		unset = not specified.
				 */
		//		inline ObjectRecognitionBehavior get_behavior() const {
		//			return idl_CommObjectRecognitionEventResult.behavior;
		//		}

				/**
				 * Set the current state.
				 * 		invisible =
				 * 		visible =
				 * 		finished = the object recognition is done.
				 */
				inline void set_state(ObjectRecognitionState state) {
					idl_CommObjectRecognitionEventResult.state = state;
				}

				/**
				 * Get the current state.
				 * 		invisible =
				 * 		visible =
				 * 		finished = the object recognition is done.
				 */
				inline ObjectRecognitionState get_state() const {
					return idl_CommObjectRecognitionEventResult.state;
				}

				/**
				 * Set the size of the object id list.
				 */
				inline void set_object_id_size(size_t size) {
					idl_CommObjectRecognitionEventResult.object_id.resize(size);
				}

				/**
				 * Get the size of the object id list.
				 */
				inline size_t get_object_id_size() const {
					return idl_CommObjectRecognitionEventResult.object_id.size();
				}

				/**
				 * Set the unique object id at pos index.
				 */
				inline void set_object_id(size_t index, unsigned int id) {
					idl_CommObjectRecognitionEventResult.object_id[index] = id;
				}

				/**
				 * Get the unique object id at pos index.
				 */
				inline unsigned int get_object_id(size_t index) const {
					return idl_CommObjectRecognitionEventResult.object_id[index];
				}

				inline void set_environment_id(unsigned int id) {
					idl_CommObjectRecognitionEventResult.environment_id = id;
				}

				inline unsigned int get_environment_id() const {
					return idl_CommObjectRecognitionEventResult.environment_id;
				}

				/**
				 * Print the object to an output stream.
				 * @param os Output stream to which should be printed
				 */
				void print(std::ostream &os = std::cout) const;
};

inline std::ostream &operator<<(std::ostream &os, const CommObjectRecognitionEventResult &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace CommObjectRecognitionObjects */
#endif /* COMMOBJECTRECOGNITIONOBJECTS_COMMOBJECTRECOGNITIONEVENTRESULT_H_ */
