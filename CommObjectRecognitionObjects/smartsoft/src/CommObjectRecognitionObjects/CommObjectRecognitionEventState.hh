//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMOBJECTRECOGNITIONOBJECTS_COMMOBJECTRECOGNITIONEVENTSTATE_H_
#define COMMOBJECTRECOGNITIONOBJECTS_COMMOBJECTRECOGNITIONEVENTSTATE_H_

#include "CommObjectRecognitionObjects/CommObjectRecognitionEventStateCore.hh"

namespace CommObjectRecognitionObjects {
		
class CommObjectRecognitionEventState : public CommObjectRecognitionEventStateCore {

protected:
//	ObjectRecognitionBehavior behavior;
	std::vector<unsigned int> object_id;
	unsigned int environment_id;
	ObjectRecognitionState state;

	public:
		// default constructors
		CommObjectRecognitionEventState();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommObjectRecognitionEventState(const CommObjectRecognitionObjects::ObjectRecognitionState &state, const std::vector<unsigned int> &object_id);
		
		CommObjectRecognitionEventState(const CommObjectRecognitionEventStateCore &commObjectRecognitionEventState);
		CommObjectRecognitionEventState(const DATATYPE &commObjectRecognitionEventState);
		virtual ~CommObjectRecognitionEventState();
		
		// use framework specific getter and setter methods from core (base) class
		using CommObjectRecognitionEventStateCore::get;
		using CommObjectRecognitionEventStateCore::set;
		
		//
		// feel free to add customized methods here
		//

		/**
	 * Set the current behavior.
	 * 		fullsearch = return all objects found in the scene, although obstacles.
	 * 		search = search only until the first object is found.
	 * 		unset = not specified.
	 */
//	inline void set_behavior(ObjectRecognitionBehavior behavior) {
//		this->behavior = behavior;
//	}

	/**
	 * Get the current behavior.
	 * 		fullsearch = return all objects found in the scene, although obstacles.
	 * 		search = search only until the first object is found.
	 * 		unset = not specified.
	 */
//	inline ObjectRecognitionBehavior get_behavior() const {
//		return behavior;
//	}

	/**
	 * Set the current state.
	 * 		invisible =
	 * 		visible =
	 * 		finished =
	 */
	inline void set_state(ObjectRecognitionState state) {
		this->state = state;
	}

	/**
	 * Get the current state.
	 * 		invisible =
	 * 		visible =
	 * 		finished =
	 */
	inline ObjectRecognitionState get_state() const {
		return state;
	}

	/**
	 * Set the size of the object id list.
	 */
	inline void set_object_id_size(size_t size) {
		object_id.resize(size);
	}

	/**
	 * Get the size of the object id list.
	 */
	inline size_t get_object_id_size() const {
		return object_id.size();
	}

	/**
	 * Set the unique object id at pos index.
	 */
	inline void set_object_id(size_t index, unsigned int id) {
		object_id[index] = id;
	}

	/**
	 * Get the unique object id at pos index.
	 */
	inline unsigned int get_object_id(size_t index) const {
		return object_id[index];
	}

	inline void set_environment_id(unsigned int id) {
		environment_id = id;
	}

	inline unsigned int get_environment_id() const {
		return environment_id;
	}
};

inline std::ostream &operator<<(std::ostream &os, const CommObjectRecognitionEventState &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace CommObjectRecognitionObjects */
#endif /* COMMOBJECTRECOGNITIONOBJECTS_COMMOBJECTRECOGNITIONEVENTSTATE_H_ */
