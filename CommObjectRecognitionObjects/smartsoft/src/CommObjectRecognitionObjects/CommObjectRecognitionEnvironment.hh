//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMOBJECTRECOGNITIONOBJECTS_COMMOBJECTRECOGNITIONENVIRONMENT_H_
#define COMMOBJECTRECOGNITIONOBJECTS_COMMOBJECTRECOGNITIONENVIRONMENT_H_

#include "CommObjectRecognitionObjects/CommObjectRecognitionEnvironmentCore.hh"

namespace CommObjectRecognitionObjects {
		
class CommObjectRecognitionEnvironment : public CommObjectRecognitionEnvironmentCore {
	public:
		// default constructors
		CommObjectRecognitionEnvironment();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommObjectRecognitionEnvironment(const std::vector<CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties> &objects, const bool &is_valid = false);
		
		CommObjectRecognitionEnvironment(const CommObjectRecognitionEnvironmentCore &commObjectRecognitionEnvironment);
		CommObjectRecognitionEnvironment(const DATATYPE &commObjectRecognitionEnvironment);
		virtual ~CommObjectRecognitionEnvironment();
		
		// use framework specific getter and setter methods from core (base) class
		using CommObjectRecognitionEnvironmentCore::get;
		using CommObjectRecognitionEnvironmentCore::set;
		
		//
		// feel free to add customized methods here
		//

		inline bool getIs_valid() const
			{
				return idl_CommObjectRecognitionEnvironment.is_valid;
			}
			inline void setIs_valid(const bool &is_valid)
			{
				idl_CommObjectRecognitionEnvironment.is_valid = is_valid;
			}

			inline unsigned getObjectsNbrElements() const
			{
				return idl_CommObjectRecognitionEnvironment.objects.size();
			}
			inline CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties getObjectsElementFromPos(
					const unsigned &pos) const
			{
				return CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties(
						idl_CommObjectRecognitionEnvironment.objects[pos]);
			}
			inline bool setObjectsElementOnPos(
					const CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties &objects,
					const unsigned &pos)
			{
				if (pos < getObjectsNbrElements())
				{
					idl_CommObjectRecognitionEnvironment.objects[pos] = objects;
					return true;
				}
				return false;
			}

			//
			// add your customized interface here
			//


			/**
			 * Check if this object is valid.
			 * An invalid environment may be sent if the environment id could not be resolved by the component.
			 */
			inline bool is_valid() const {
				return idl_CommObjectRecognitionEnvironment.is_valid;
			}

			/**
			 * Set the environment to valid/invalid
			 */
			inline void set_valid(bool valid) {
				idl_CommObjectRecognitionEnvironment.is_valid = valid;
			}

			/**
			 * Set the number of objects which are contained in the environment.
			 */
			inline void set_size(uint32_t size) {
				idl_CommObjectRecognitionEnvironment.objects.resize(size);
			}

			/**
			 * Returns the number of objects which are contained in the environment.
			 */
			inline uint32_t get_size() const {
				return idl_CommObjectRecognitionEnvironment.objects.size();
			}

			/**
			 * Set the properties for a specific object.
			 */
			inline void set_object_properties(uint32_t index, const CommObjectRecognitionObjectProperties& obj) {
				idl_CommObjectRecognitionEnvironment.objects[index] = obj;
			}

			/**
			 * Returns the properties for a specific object.
			 */
			inline CommObjectRecognitionObjectProperties get_object_properties(uint32_t index) const {
				return CommObjectRecognitionObjectProperties(idl_CommObjectRecognitionEnvironment.objects[index]);
			}
};

inline std::ostream &operator<<(std::ostream &os, const CommObjectRecognitionEnvironment &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace CommObjectRecognitionObjects */
#endif /* COMMOBJECTRECOGNITIONOBJECTS_COMMOBJECTRECOGNITIONENVIRONMENT_H_ */
