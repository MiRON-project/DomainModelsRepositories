//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommObjectRecognitionObjects/CommTriMeshACE.hh"
#include <ace/SString.h>

// serialization operator for element CommTriMesh
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommObjectRecognitionObjectsIDL::CommTriMesh &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element vertices_p1
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.vertices_p1.size());
	good_bit = good_bit && cdr.write_ulong_array(data.vertices_p1.data(), data.vertices_p1.size());
	// serialize list-element vertices_p2
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.vertices_p2.size());
	good_bit = good_bit && cdr.write_ulong_array(data.vertices_p2.data(), data.vertices_p2.size());
	// serialize list-element vertices_p3
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.vertices_p3.size());
	good_bit = good_bit && cdr.write_ulong_array(data.vertices_p3.data(), data.vertices_p3.size());
	// serialize list-element points_x
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.points_x.size());
	good_bit = good_bit && cdr.write_double_array(data.points_x.data(), data.points_x.size());
	// serialize list-element points_y
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.points_y.size());
	good_bit = good_bit && cdr.write_double_array(data.points_y.data(), data.points_y.size());
	// serialize list-element points_z
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.points_z.size());
	good_bit = good_bit && cdr.write_double_array(data.points_z.data(), data.points_z.size());
	
	return good_bit;
}

// de-serialization operator for element CommTriMesh
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommObjectRecognitionObjectsIDL::CommTriMesh &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize list-type element vertices_p1
	ACE_CDR::ULong data_vertices_p1Nbr;
	good_bit = good_bit && cdr >> data_vertices_p1Nbr;
	data.vertices_p1.resize(data_vertices_p1Nbr);
	good_bit = good_bit && cdr.read_ulong_array(data.vertices_p1.data(), data_vertices_p1Nbr);
	// deserialize list-type element vertices_p2
	ACE_CDR::ULong data_vertices_p2Nbr;
	good_bit = good_bit && cdr >> data_vertices_p2Nbr;
	data.vertices_p2.resize(data_vertices_p2Nbr);
	good_bit = good_bit && cdr.read_ulong_array(data.vertices_p2.data(), data_vertices_p2Nbr);
	// deserialize list-type element vertices_p3
	ACE_CDR::ULong data_vertices_p3Nbr;
	good_bit = good_bit && cdr >> data_vertices_p3Nbr;
	data.vertices_p3.resize(data_vertices_p3Nbr);
	good_bit = good_bit && cdr.read_ulong_array(data.vertices_p3.data(), data_vertices_p3Nbr);
	// deserialize list-type element points_x
	ACE_CDR::ULong data_points_xNbr;
	good_bit = good_bit && cdr >> data_points_xNbr;
	data.points_x.resize(data_points_xNbr);
	good_bit = good_bit && cdr.read_double_array(data.points_x.data(), data_points_xNbr);
	// deserialize list-type element points_y
	ACE_CDR::ULong data_points_yNbr;
	good_bit = good_bit && cdr >> data_points_yNbr;
	data.points_y.resize(data_points_yNbr);
	good_bit = good_bit && cdr.read_double_array(data.points_y.data(), data_points_yNbr);
	// deserialize list-type element points_z
	ACE_CDR::ULong data_points_zNbr;
	good_bit = good_bit && cdr >> data_points_zNbr;
	data.points_z.resize(data_points_zNbr);
	good_bit = good_bit && cdr.read_double_array(data.points_z.data(), data_points_zNbr);
	
	return good_bit;
}

// serialization operator for CommunicationObject CommTriMesh
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommObjectRecognitionObjects::CommTriMesh &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject CommTriMesh
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommObjectRecognitionObjects::CommTriMesh &obj)
{
	return cdr >> obj.set();
}
