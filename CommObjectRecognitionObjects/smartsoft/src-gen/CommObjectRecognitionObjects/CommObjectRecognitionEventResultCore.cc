//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommObjectRecognitionObjects/CommObjectRecognitionEventResultCore.hh"

// serialization/deserialization operators
//#include "CommObjectRecognitionObjects/CommObjectRecognitionEventResultACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace CommObjectRecognitionObjects 
{
	const char* CommObjectRecognitionEventResultCore::getCompiledHash()
	{
		return CommObjectRecognitionObjectsIDL::REPO_HASH;
	}
	
	void CommObjectRecognitionEventResultCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
	}
	
	void CommObjectRecognitionEventResultCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "CommObjectRecognitionEventResultCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
	}
	
	#ifdef ENABLE_HASH
	size_t CommObjectRecognitionEventResultCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		boost::hash_combine(seed, data.state);
		boost::hash_combine(seed, data.environment_id);
		std::vector<ACE_CDR::ULong>::const_iterator data_object_idIt;
		for(data_object_idIt=data.object_id.begin(); data_object_idIt!=data.object_id.end(); data_object_idIt++) {
			boost::hash_combine(seed, *data_object_idIt);
		}
		
		return seed;
	}
	#endif
	
	// default constructor
	CommObjectRecognitionEventResultCore::CommObjectRecognitionEventResultCore()
	:	idl_CommObjectRecognitionEventResult()
	{  
		setState(CommObjectRecognitionObjects::ObjectRecognitionState());
		setEnvironment_id(0);
		setObject_id(std::vector<unsigned int>());
	}
	
	CommObjectRecognitionEventResultCore::CommObjectRecognitionEventResultCore(const DATATYPE &data)
	:	idl_CommObjectRecognitionEventResult(data)
	{  }

	CommObjectRecognitionEventResultCore::~CommObjectRecognitionEventResultCore()
	{  }
	
	void CommObjectRecognitionEventResultCore::to_ostream(std::ostream &os) const
	{
	  os << "CommObjectRecognitionEventResult(";
	  getState().to_ostream(os);
	  os << getEnvironment_id() << " ";
	  std::vector<unsigned int>::const_iterator object_idIt;
	  std::vector<unsigned int> object_idList = getObject_idCopy();
	  for(object_idIt=object_idList.begin(); object_idIt!=object_idList.end(); object_idIt++) {
	  	os << *object_idIt << " ";
	  }
	  os << ") ";
	}
	
	// convert to xml stream
	void CommObjectRecognitionEventResultCore::to_xml(std::ostream &os, const std::string &indent) const {
		size_t counter = 0;
		
		os << indent << "<state>";
		getState().to_xml(os, indent);
		os << indent << "</state>";
		os << indent << "<environment_id>" << getEnvironment_id() << "</environment_id>";
		std::vector<unsigned int>::const_iterator object_idIt;
		std::vector<unsigned int> object_idList = getObject_idCopy();
		counter = 0;
		os << indent << "<object_idList n=\"" << object_idList.size() << "\">";
		for(object_idIt=object_idList.begin(); object_idIt!=object_idList.end(); object_idIt++) {
			os << indent << "<object_id i=\"" << counter++ << "\">" << *object_idIt << "</object_id>";
		}
		os << indent << "</object_idList>";
	}
	
	// restore from xml stream
	void CommObjectRecognitionEventResultCore::from_xml(std::istream &is) {
		size_t counter = 0;
		
		static const Smart::KnuthMorrisPratt kmp_state("<state>");
		static const Smart::KnuthMorrisPratt kmp_environment_id("<environment_id>");
		static const Smart::KnuthMorrisPratt kmp_object_idList("<object_idList n=\"");
		static const Smart::KnuthMorrisPratt kmp_object_id("\">");
		
		if(kmp_state.search(is)) {
			CommObjectRecognitionObjects::ObjectRecognitionState stateItem;
			stateItem.from_xml(is);
			setState(stateItem);
		}
		if(kmp_environment_id.search(is)) {
			unsigned int environment_idItem;
			is >> environment_idItem;
			setEnvironment_id(environment_idItem);
		}
		if(kmp_object_idList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			unsigned int object_idItem;
			std::vector<unsigned int> object_idList;
			kmp_object_id.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_object_id.search(is)) {
					is >> object_idItem;
					object_idList.push_back(object_idItem);
				}
			}
			setObject_id(object_idList);
		}
	}
	
	/*
	void CommObjectRecognitionEventResultCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		CommObjectRecognitionObjectsIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(CommObjectRecognitionObjectsIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see CommObjectRecognitionEventResultACE.hh)
		cdr << idl_CommObjectRecognitionEventResult;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_CommObjectRecognitionEventResult);
		cdr << data_hash;
		// std::cout << "CommObjectRecognitionEventResultCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void CommObjectRecognitionEventResultCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		CommObjectRecognitionObjectsIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see CommObjectRecognitionEventResultACE.hh)
		cdr >> idl_CommObjectRecognitionEventResult;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_CommObjectRecognitionEventResult);
		assert(data_hash == own_hash);
		// std::cout << "CommObjectRecognitionEventResultCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace CommObjectRecognitionObjects */
