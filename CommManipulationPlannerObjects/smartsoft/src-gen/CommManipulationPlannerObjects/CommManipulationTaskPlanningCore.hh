//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMMANIPULATIONPLANNEROBJECTS_COMMMANIPULATIONTASKPLANNING_CORE_H_
#define COMMMANIPULATIONPLANNEROBJECTS_COMMMANIPULATIONTASKPLANNING_CORE_H_

#include "CommManipulationPlannerObjects/CommManipulationTaskPlanningData.hh"
#include "CommManipulationPlannerObjects/enumManipulationTaskParameterMode.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommManipulationPlannerObjects {
	
class CommManipulationTaskPlanningCore {
protected:
	// data structure
	CommManipulationPlannerObjectsIDL::CommManipulationTaskPlanning idl_CommManipulationTaskPlanning;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommManipulationPlannerObjectsIDL::CommManipulationTaskPlanning DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommManipulationTaskPlanningCore();
	CommManipulationTaskPlanningCore(const DATATYPE &data);
	// default destructor
	virtual ~CommManipulationTaskPlanningCore();
	
	const DATATYPE& get() const { return idl_CommManipulationTaskPlanning; }
	operator const DATATYPE&() const { return idl_CommManipulationTaskPlanning; }
	DATATYPE& set() { return idl_CommManipulationTaskPlanning; }

	static inline std::string identifier(void) { return "CommManipulationPlannerObjects::CommManipulationTaskPlanning"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element FurnitureIdentifier
	inline unsigned int getFurnitureIdentifier() const { return idl_CommManipulationTaskPlanning.furnitureIdentifier; }
	inline CommManipulationTaskPlanningCore& setFurnitureIdentifier(const unsigned int &furnitureIdentifier) { idl_CommManipulationTaskPlanning.furnitureIdentifier = furnitureIdentifier; return *this; }
	
	// getter and setter for element DoorIdentifier
	inline unsigned int getDoorIdentifier() const { return idl_CommManipulationTaskPlanning.doorIdentifier; }
	inline CommManipulationTaskPlanningCore& setDoorIdentifier(const unsigned int &doorIdentifier) { idl_CommManipulationTaskPlanning.doorIdentifier = doorIdentifier; return *this; }
	
	// getter and setter for element OpenAmount
	inline double getOpenAmount() const { return idl_CommManipulationTaskPlanning.openAmount; }
	inline CommManipulationTaskPlanningCore& setOpenAmount(const double &openAmount) { idl_CommManipulationTaskPlanning.openAmount = openAmount; return *this; }
	
	// getter and setter for element Mode
	inline CommManipulationPlannerObjects::ManipulationTaskParameterMode getMode() const { return CommManipulationPlannerObjects::ManipulationTaskParameterMode(idl_CommManipulationTaskPlanning.mode); }
	inline CommManipulationTaskPlanningCore& setMode(const CommManipulationPlannerObjects::ManipulationTaskParameterMode &mode) { idl_CommManipulationTaskPlanning.mode = mode; return *this; }
};

} /* namespace CommManipulationPlannerObjects */
#endif /* COMMMANIPULATIONPLANNEROBJECTS_COMMMANIPULATIONTASKPLANNING_CORE_H_ */
