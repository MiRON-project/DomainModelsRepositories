//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMMANIPULATIONPLANNEROBJECTS_COMMMANIPULATIONPLANNEREVENTPARAMETER_H_
#define COMMMANIPULATIONPLANNEROBJECTS_COMMMANIPULATIONPLANNEREVENTPARAMETER_H_

#include "CommManipulationPlannerObjects/CommManipulationPlannerEventParameterCore.hh"

namespace CommManipulationPlannerObjects {
		
class CommManipulationPlannerEventParameter : public CommManipulationPlannerEventParameterCore {
	public:
		// default constructors
		CommManipulationPlannerEventParameter();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommManipulationPlannerEventParameter(const CommManipulationPlannerObjects::ManipulationPlannerEvent &event);
		
		CommManipulationPlannerEventParameter(const CommManipulationPlannerEventParameterCore &commManipulationPlannerEventParameter);
		CommManipulationPlannerEventParameter(const DATATYPE &commManipulationPlannerEventParameter);
		virtual ~CommManipulationPlannerEventParameter();
		
		// use framework specific getter and setter methods from core (base) class
		using CommManipulationPlannerEventParameterCore::get;
		using CommManipulationPlannerEventParameterCore::set;
		
		//
		// feel free to add customized methods here
		//

		inline ManipulationPlannerEvent getEvent() const
		{
			return idl_CommManipulationPlannerEventParameter.event;
		}
		inline void setEvent(const ManipulationPlannerEvent &event)
		{
			idl_CommManipulationPlannerEventParameter.event = event;
		}

		//
		// add your customized interface here
		//

		inline void set_event(ManipulationPlannerEvent event) {
			idl_CommManipulationPlannerEventParameter.event = event;
		}

		inline ManipulationPlannerEvent get_event() const {
			return (ManipulationPlannerEvent) idl_CommManipulationPlannerEventParameter.event;
		}
};

inline std::ostream &operator<<(std::ostream &os, const CommManipulationPlannerEventParameter &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace CommManipulationPlannerObjects */
#endif /* COMMMANIPULATIONPLANNEROBJECTS_COMMMANIPULATIONPLANNEREVENTPARAMETER_H_ */
