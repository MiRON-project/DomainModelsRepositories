//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMMANIPULATIONPLANNEROBJECTS_COMMMANIPULATIONPLANNEREVENTRESULT_H_
#define COMMMANIPULATIONPLANNEROBJECTS_COMMMANIPULATIONPLANNEREVENTRESULT_H_

#include "CommManipulationPlannerObjects/CommManipulationPlannerEventResultCore.hh"

namespace CommManipulationPlannerObjects {
		
class CommManipulationPlannerEventResult : public CommManipulationPlannerEventResultCore {
	public:
		// default constructors
		CommManipulationPlannerEventResult();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommManipulationPlannerEventResult(const CommManipulationPlannerObjects::ManipulationPlannerEvent &event);
		
		CommManipulationPlannerEventResult(const CommManipulationPlannerEventResultCore &commManipulationPlannerEventResult);
		CommManipulationPlannerEventResult(const DATATYPE &commManipulationPlannerEventResult);
		virtual ~CommManipulationPlannerEventResult();
		
		// use framework specific getter and setter methods from core (base) class
		using CommManipulationPlannerEventResultCore::get;
		using CommManipulationPlannerEventResultCore::set;
		
		//
		// feel free to add customized methods here
		//

		inline ManipulationPlannerEvent getEvent() const
		{
			return idl_CommManipulationPlannerEventResult.event;
		}
		inline void setEvent(const ManipulationPlannerEvent &event)
		{
			idl_CommManipulationPlannerEventResult.event = event;
		}

		inline CommBasicObjects::CommPose3d getPose() const
		{
			return CommBasicObjects::CommPose3d(
					idl_CommManipulationPlannerEventResult.pose);
		}
		inline void setPose(const CommBasicObjects::CommPose3d &pose)
		{
			idl_CommManipulationPlannerEventResult.pose = pose;
		}

		//
		// add your customized interface here
		//

		inline void set_event(ManipulationPlannerEvent event) {
			idl_CommManipulationPlannerEventResult.event = event;
		}

		inline ManipulationPlannerEvent get_event() const {
			return idl_CommManipulationPlannerEventResult.event;
		}

		inline void set_pose(CommBasicObjects::CommPose3d pose) {
			idl_CommManipulationPlannerEventResult.pose = pose;
		}

		inline CommBasicObjects::CommPose3d get_pose() const {
			return idl_CommManipulationPlannerEventResult.pose;
		}
};

inline std::ostream &operator<<(std::ostream &os, const CommManipulationPlannerEventResult &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace CommManipulationPlannerObjects */
#endif /* COMMMANIPULATIONPLANNEROBJECTS_COMMMANIPULATIONPLANNEREVENTRESULT_H_ */
