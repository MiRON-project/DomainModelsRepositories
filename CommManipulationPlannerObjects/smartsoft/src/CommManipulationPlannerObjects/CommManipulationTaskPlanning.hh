//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMMANIPULATIONPLANNEROBJECTS_COMMMANIPULATIONTASKPLANNING_H_
#define COMMMANIPULATIONPLANNEROBJECTS_COMMMANIPULATIONTASKPLANNING_H_

#include "CommManipulationPlannerObjects/CommManipulationTaskPlanningCore.hh"

namespace CommManipulationPlannerObjects {
		
class CommManipulationTaskPlanning : public CommManipulationTaskPlanningCore {
	public:
		// default constructors
		CommManipulationTaskPlanning();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommManipulationTaskPlanning(const unsigned int &furnitureIdentifier, const unsigned int &doorIdentifier, const double &openAmount, const CommManipulationPlannerObjects::ManipulationTaskParameterMode &mode);
		
		CommManipulationTaskPlanning(const CommManipulationTaskPlanningCore &commManipulationTaskPlanning);
		CommManipulationTaskPlanning(const DATATYPE &commManipulationTaskPlanning);
		virtual ~CommManipulationTaskPlanning();
		
		// use framework specific getter and setter methods from core (base) class
		using CommManipulationTaskPlanningCore::get;
		using CommManipulationTaskPlanningCore::set;
		
		//
		// feel free to add customized methods here
		//
};

inline std::ostream &operator<<(std::ostream &os, const CommManipulationTaskPlanning &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace CommManipulationPlannerObjects */
#endif /* COMMMANIPULATIONPLANNEROBJECTS_COMMMANIPULATIONTASKPLANNING_H_ */
