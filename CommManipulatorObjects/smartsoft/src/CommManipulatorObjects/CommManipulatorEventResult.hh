//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMMANIPULATOROBJECTS_COMMMANIPULATOREVENTRESULT_H_
#define COMMMANIPULATOROBJECTS_COMMMANIPULATOREVENTRESULT_H_

#include "CommManipulatorObjects/CommManipulatorEventResultCore.hh"

namespace CommManipulatorObjects {
		
class CommManipulatorEventResult : public CommManipulatorEventResultCore {
	public:
		// default constructors
		CommManipulatorEventResult();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommManipulatorEventResult(const CommManipulatorObjects::ManipulatorEvent &event);
		
		CommManipulatorEventResult(const CommManipulatorEventResultCore &commManipulatorEventResult);
		CommManipulatorEventResult(const DATATYPE &commManipulatorEventResult);
		virtual ~CommManipulatorEventResult();
		
		// use framework specific getter and setter methods from core (base) class
		using CommManipulatorEventResultCore::get;
		using CommManipulatorEventResultCore::set;
		
		//
		// feel free to add customized methods here
		//

		inline ManipulatorEvent getEvent() const
		{
			return idl_CommManipulatorEventResult.event;
		}
		inline void setEvent(const ManipulatorEvent &event)
		{
			idl_CommManipulatorEventResult.event = event;
		}

		//
		// add your customized interface here
		//


		/**
		 * Set the event that occurred.
		 */
		inline void set_event(CommManipulatorObjects::ManipulatorEvent event) {
			idl_CommManipulatorEventResult.event = event;
		}

		/**
		 * Get the event that occurred.
		 */
		inline CommManipulatorObjects::ManipulatorEvent get_event() const {
			return idl_CommManipulatorEventResult.event;
		}

		/**
		 * Get the event as string that occurred.
		 */
		void get(char* r) const;
};

inline std::ostream &operator<<(std::ostream &os, const CommManipulatorEventResult &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace CommManipulatorObjects */
#endif /* COMMMANIPULATOROBJECTS_COMMMANIPULATOREVENTRESULT_H_ */
