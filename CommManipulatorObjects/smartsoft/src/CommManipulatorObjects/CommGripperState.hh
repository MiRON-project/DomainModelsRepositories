//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMMANIPULATOROBJECTS_COMMGRIPPERSTATE_H_
#define COMMMANIPULATOROBJECTS_COMMGRIPPERSTATE_H_

#include "CommManipulatorObjects/CommGripperStateCore.hh"

namespace CommManipulatorObjects {
		
class CommGripperState : public CommGripperStateCore {
	public:
		// default constructors
		CommGripperState();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommGripperState(const std::vector<float> &pos, const CommManipulatorObjects::GripperGraspState &graspState, const bool &is_valid = false, const bool &graspState_valid = false);
		
		CommGripperState(const CommGripperStateCore &commGripperState);
		CommGripperState(const DATATYPE &commGripperState);
		virtual ~CommGripperState();
		
		// use framework specific getter and setter methods from core (base) class
		using CommGripperStateCore::get;
		using CommGripperStateCore::set;
		
		//
		// feel free to add customized methods here
		//

		inline bool getIs_valid() const
			{
				return idl_CommGripperState.is_valid;
			}
			inline void setIs_valid(const bool &is_valid)
			{
				idl_CommGripperState.is_valid = is_valid;
			}

			inline std::vector<float>& getPosRef()
			{
				return idl_CommGripperState.pos;
			}

			//
			// add your customized interface here
			//


			/**
			 * Set the number of joints for the gripper.
			 * Must be called before set_pos(...)
			 */
			void set_size(size_t size)
			{
				idl_CommGripperState.pos.resize(size);
			}

			/**
			 * Returns the number of joints for the gripper
			 */
			size_t get_size() const
			{
				return idl_CommGripperState.pos.size();
			}

			/**
			 * Set the position of the gripper actor.
			 * If linear joint = pos in mm
			 * If angular joint = angle in rad
			 */
			void set_pos(size_t index, float pos)
			{
				idl_CommGripperState.pos[index] = pos;
			}

			/**
			 * Get the position of the gripper actor.
			 * If linear joint = pos in mm
			 * If angular joint = angle in rad
			 */
			float get_pos(size_t index) const
			{
				return idl_CommGripperState.pos[index];
			}

			/**
			 * Indicates if the data in the CommObject is valid
			 */
			bool is_valid() const
			{
				return idl_CommGripperState.is_valid;
			}

			/**
			 * Set CommObject to valid/invalid
			 */
			void set_valid(bool valid)
			{
				idl_CommGripperState.is_valid = valid;
			}

			/**
			 * Print the object to an output stream.
			 * @param os Output stream to which should be printed
			 */
			void print(std::ostream &os = std::cout) const;
};

inline std::ostream &operator<<(std::ostream &os, const CommGripperState &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace CommManipulatorObjects */
#endif /* COMMMANIPULATOROBJECTS_COMMGRIPPERSTATE_H_ */
