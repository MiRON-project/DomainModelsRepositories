//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

#include "CommManipulatorObjects/CommManipulatorState.hh"

using namespace CommManipulatorObjects;

CommManipulatorState::CommManipulatorState()
:	CommManipulatorStateCore()
{  }


/**
 * Constructor to set all values.
 * NOTE that you have to keep this constructor consistent with the model!
 * Use  at your own choice.
 *
 * The preferred way to set values for initialization is:
 *      CommRepository::MyCommObject obj;
 *      obj.setX(1).setY(2).setZ(3)...;
CommManipulatorState::CommManipulatorState(const unsigned int &id, const std::vector<double> &joint_angles, const CommBasicObjects::CommPose3d &pose_tcp, const CommBasicObjects::CommPose3d &pose_manipulator, const bool &is_valid)
:	CommManipulatorStateCore() // base constructor sets default values as defined in the model
{
	setId(id);
	setJoint_angles(joint_angles);
	setPose_tcp(pose_tcp);
	setPose_manipulator(pose_manipulator);
	setIs_valid(is_valid);
}
 */

CommManipulatorState::CommManipulatorState(const CommManipulatorStateCore &commManipulatorState)
:	CommManipulatorStateCore(commManipulatorState)
{  }

CommManipulatorState::CommManipulatorState(const DATATYPE &commManipulatorState)
:	CommManipulatorStateCore(commManipulatorState)
{  }

CommManipulatorState::~CommManipulatorState()
{  }
void CommManipulatorState::print(std::ostream &os) const {
	os << "CommManipulatorState(";
	os << "id=" << get_id() << "\n";
	if (is_valid()) {
		double x, y, z, azimuth, elevation, roll;

		get_pose_TCP_manipulator(x, y, z, azimuth, elevation, roll);
		os << "pose tcp manipulator=" << x << ", " << y << ", " << z << ", " << azimuth << ", " << elevation << ", "
				<< roll << "\n";

		get_pose_TCP_robot(x, y, z, azimuth, elevation, roll);
		os << "pose tcp robot=" << x << ", " << y << ", " << z << ", " << azimuth << ", " << elevation << ", "
						<< roll << "\n";

		get_pose_manipulator(x, y, z, azimuth, elevation, roll);
		os << "pose manipulator=" << x << ", " << y << ", " << z << ", " << azimuth << ", " << elevation << ", "
						<< roll << "\n";

		os << "joint angles=";
		for (size_t i = 0; i < get_joint_count(); ++i) {
			os << get_joint_angle(i) << ", ";
		}
		os << "\n";

	} else {
		os << "invalid";
	}
	os << ")\n";
}
