//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
//  Copyright (C) 2009 Andreas Steck, Matthias Lutz
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Library".
//  It provides standardized patterns for communication between
//  different components.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#ifndef DOMAINSPEECH_COMMSPEECHINPUTEVENTPARAMETER_H_
#define DOMAINSPEECH_COMMSPEECHINPUTEVENTPARAMETER_H_

#include "DomainSpeech/CommSpeechInputEventParameterCore.hh"
#include <string>
namespace DomainSpeech {
		
class CommSpeechInputEventParameter : public CommSpeechInputEventParameterCore {
	public:
		// default constructors
		CommSpeechInputEventParameter();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommSpeechInputEventParameter(const double &confidence, const std::string &topic);
		
		CommSpeechInputEventParameter(const CommSpeechInputEventParameterCore &commSpeechInputEventParameter);
		CommSpeechInputEventParameter(const DATATYPE &commSpeechInputEventParameter);
		virtual ~CommSpeechInputEventParameter();
		
		// use framework specific getter and setter methods from core (base) class
		using CommSpeechInputEventParameterCore::get;
		using CommSpeechInputEventParameterCore::set;
		
		//
		// feel free to add customized methods here
		//

		inline double getConfidence() const
				{
					return idl_CommSpeechInputEventParameter.confidence;
				}
				inline void setConfidence(const double &confidence)
				{
					idl_CommSpeechInputEventParameter.confidence = confidence;
				}

				inline std::string getTopic() const
				{
					return idl_CommSpeechInputEventParameter.topic.c_str();
				}
				inline void setTopic(const std::string &topic)
				{
					idl_CommSpeechInputEventParameter.topic = topic.c_str();
				}

				//
				// add your customized interface here
				//
				  void set_topic(std::string);
				  std::string get_topic() const;

				  void set_confidence(double);
				  double get_confidence() const;
};

inline std::ostream &operator<<(std::ostream &os, const CommSpeechInputEventParameter &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace DomainSpeech */
#endif /* DOMAINSPEECH_COMMSPEECHINPUTEVENTPARAMETER_H_ */
