//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
//  Copyright (C) 2009 Andreas Steck, Matthias Lutz
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Library".
//  It provides standardized patterns for communication between
//  different components.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------


#include "DomainSpeech/SpeechInputEventState.hh"

using namespace DomainSpeech;

SpeechInputEventState::SpeechInputEventState()
:	SpeechInputEventStateCore()
{  }


/**
 * Constructor to set all values.
 * NOTE that you have to keep this constructor consistent with the model!
 * Use  at your own choice.
 *
 * The preferred way to set values for initialization is:
 *      CommRepository::MyCommObject obj;
 *      obj.setX(1).setY(2).setZ(3)...;
SpeechInputEventState::SpeechInputEventState(const std::string &topic, const std::string &text, const std::string &semantic, const double &confidence)
:	SpeechInputEventStateCore() // base constructor sets default values as defined in the model
{
	setTopic(topic);
	setText(text);
	setSemantic(semantic);
	setConfidence(confidence);
}
 */

SpeechInputEventState::SpeechInputEventState(const SpeechInputEventStateCore &speechInputEventState)
:	SpeechInputEventStateCore(speechInputEventState)
{  }

SpeechInputEventState::SpeechInputEventState(const DATATYPE &speechInputEventState)
:	SpeechInputEventStateCore(speechInputEventState)
{  }

SpeechInputEventState::~SpeechInputEventState()
{  }


void SpeechInputEventState::set_topic(std::string t)
{
  topic = t;
}

std::string SpeechInputEventState::get_topic() const
{
  return topic;
}

void SpeechInputEventState::set_confidence(double c)
{
  confidence = c;
}

double SpeechInputEventState::get_confidence() const
{
  return confidence;
}

void SpeechInputEventState::set_text(std::string t)
{
  text = t;
}

std::string SpeechInputEventState::get_text() const
{
  return text;
}

void SpeechInputEventState::set_semantic(std::string s)
{
  semantic = s;
}

std::string SpeechInputEventState::get_semantic() const
{
  return semantic;
}
