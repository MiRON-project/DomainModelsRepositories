//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
//  Copyright (C) 2003 Boris Kluge
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Basic Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  (partly based on work by Christian Schlegel and Pablo d'Angelo)
//
// --------------------------------------------------------------------------

#ifndef DOMAINSPEECH_COMMSPEECHOUTPUTMESSAGE_H_
#define DOMAINSPEECH_COMMSPEECHOUTPUTMESSAGE_H_

#include "DomainSpeech/CommSpeechOutputMessageCore.hh"

namespace DomainSpeech {
		
class CommSpeechOutputMessage : public CommSpeechOutputMessageCore {
	public:
		// default constructors
		CommSpeechOutputMessage();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommSpeechOutputMessage(const CommBasicObjects::CommTimeStamp &time, const bool &reset, const float &ttl, const std::string &text);
		
		CommSpeechOutputMessage(const CommSpeechOutputMessageCore &commSpeechOutputMessage);
		CommSpeechOutputMessage(const DATATYPE &commSpeechOutputMessage);
		virtual ~CommSpeechOutputMessage();
		
		// use framework specific getter and setter methods from core (base) class
		using CommSpeechOutputMessageCore::get;
		using CommSpeechOutputMessageCore::set;
		
		//
		// feel free to add customized methods here
		//


		inline bool getReset() const
		{
			return idl_CommSpeechOutputMessage.reset;
		}
		inline void setReset(const bool &reset)
		{
			idl_CommSpeechOutputMessage.reset = reset;
		}

		inline std::string getText() const
		{
			return idl_CommSpeechOutputMessage.text.c_str();
		}
		inline void setText(const std::string &text)
		{
			idl_CommSpeechOutputMessage.text = text.c_str();
		}

		inline CommBasicObjects::CommTimeStamp getTime() const
		{
			return CommBasicObjects::CommTimeStamp(idl_CommSpeechOutputMessage.time);
		}
		inline void setTime(const CommBasicObjects::CommTimeStamp &time)
		{
			idl_CommSpeechOutputMessage.time = time;
		}

		inline float getTtl() const
		{
			return idl_CommSpeechOutputMessage.ttl;
		}
		inline void setTtl(const float &ttl)
		{
			idl_CommSpeechOutputMessage.ttl = ttl;
		}

		//
		// add your customized interface here
		//
	  CommSpeechOutputMessage(const std::string &text);


	  /**
		Get the message text.
	   */
	  inline std::string get_message() const { return idl_CommSpeechOutputMessage.text.c_str(); }

	  /**
		Get the creation time.
	   */
	  inline CommBasicObjects::CommTimeStampCore get_creation_time() const { return CommBasicObjects::CommTimeStampCore(idl_CommSpeechOutputMessage.time); }

	  /**
		Get time to live of this message in seconds.
	   */
	  inline double get_time_to_live() const { return idl_CommSpeechOutputMessage.ttl; }

	  /**
		Compute time when message shall be discarded.
	   */
	  inline CommBasicObjects::CommTimeStamp get_discard_time() const { return CommBasicObjects::CommTimeStamp(idl_CommSpeechOutputMessage.time).advance(idl_CommSpeechOutputMessage.ttl); }

	  /**
		Set the message text.
	   */
	  inline void set_message(const std::string &msg) { idl_CommSpeechOutputMessage.text = msg.c_str(); }

	  /**
		Set the creation time to now.
	   */
	  void set_creation_time_now();

	  /**
		Set time to live of this message in seconds.
	   */
	  inline void set_time_to_live(double ttl) { idl_CommSpeechOutputMessage.ttl = ttl; }

	  /**
		Write information about this timestamp to the given output stream.
	   */
	  void print(std::ostream &os = std::cout) const;




};

inline std::ostream &operator<<(std::ostream &os, const CommSpeechOutputMessage &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace DomainSpeech */
#endif /* DOMAINSPEECH_COMMSPEECHOUTPUTMESSAGE_H_ */
