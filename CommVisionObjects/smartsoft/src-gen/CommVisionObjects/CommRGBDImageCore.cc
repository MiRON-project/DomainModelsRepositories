//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommVisionObjects/CommRGBDImageCore.hh"

// serialization/deserialization operators
//#include "CommVisionObjects/CommRGBDImageACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace CommVisionObjects 
{
	const char* CommRGBDImageCore::getCompiledHash()
	{
		return CommVisionObjectsIDL::REPO_HASH;
	}
	
	void CommRGBDImageCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
		// get hash value(s) for CommVisionObjects::CommVideoImage(idl_CommRGBDImage.color_image)
		CommVisionObjects::CommVideoImage::getAllHashValues(hashes);
		// get hash value(s) for CommVisionObjects::CommDepthImage(idl_CommRGBDImage.depth_image)
		CommVisionObjects::CommDepthImage::getAllHashValues(hashes);
		// get hash value(s) for CommBasicObjects::CommBaseState(idl_CommRGBDImage.base_state)
		CommBasicObjects::CommBaseState::getAllHashValues(hashes);
		// get hash value(s) for CommBasicObjects::CommPose3d(idl_CommRGBDImage.sensor_pose)
		CommBasicObjects::CommPose3d::getAllHashValues(hashes);
	}
	
	void CommRGBDImageCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "CommRGBDImageCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
		// check hash value(s) for CommVisionObjects::CommVideoImage(idl_CommRGBDImage.color_image)
		CommVisionObjects::CommVideoImage::checkAllHashValues(hashes);
		// check hash value(s) for CommVisionObjects::CommDepthImage(idl_CommRGBDImage.depth_image)
		CommVisionObjects::CommDepthImage::checkAllHashValues(hashes);
		// check hash value(s) for CommBasicObjects::CommBaseState(idl_CommRGBDImage.base_state)
		CommBasicObjects::CommBaseState::checkAllHashValues(hashes);
		// check hash value(s) for CommBasicObjects::CommPose3d(idl_CommRGBDImage.sensor_pose)
		CommBasicObjects::CommPose3d::checkAllHashValues(hashes);
	}
	
	#ifdef ENABLE_HASH
	size_t CommRGBDImageCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		seed += CommVisionObjects::CommVideoImage::generateDataHash(data.color_image);
		seed += CommVisionObjects::CommDepthImage::generateDataHash(data.depth_image);
		seed += CommBasicObjects::CommBaseState::generateDataHash(data.base_state);
		seed += CommBasicObjects::CommPose3d::generateDataHash(data.sensor_pose);
		boost::hash_combine(seed, data.seq_count);
		boost::hash_combine(seed, data.is_valid);
		
		return seed;
	}
	#endif
	
	// default constructor
	CommRGBDImageCore::CommRGBDImageCore()
	:	idl_CommRGBDImage()
	{  
		setColor_image(CommVisionObjects::CommVideoImage());
		setDepth_image(CommVisionObjects::CommDepthImage());
		setBase_state(CommBasicObjects::CommBaseState());
		setSensor_pose(CommBasicObjects::CommPose3d());
		setSeq_count(0);
		setIs_valid(false);
	}
	
	CommRGBDImageCore::CommRGBDImageCore(const DATATYPE &data)
	:	idl_CommRGBDImage(data)
	{  }

	CommRGBDImageCore::~CommRGBDImageCore()
	{  }
	
	void CommRGBDImageCore::to_ostream(std::ostream &os) const
	{
	  os << "CommRGBDImage(";
	  getColor_image().to_ostream(os);
	  getDepth_image().to_ostream(os);
	  getBase_state().to_ostream(os);
	  getSensor_pose().to_ostream(os);
	  os << getSeq_count() << " ";
	  os << getIs_valid() << " ";
	  os << ") ";
	}
	
	// convert to xml stream
	void CommRGBDImageCore::to_xml(std::ostream &os, const std::string &indent) const {
		os << indent << "<color_image>";
		getColor_image().to_xml(os, indent);
		os << indent << "</color_image>";
		os << indent << "<depth_image>";
		getDepth_image().to_xml(os, indent);
		os << indent << "</depth_image>";
		os << indent << "<base_state>";
		getBase_state().to_xml(os, indent);
		os << indent << "</base_state>";
		os << indent << "<sensor_pose>";
		getSensor_pose().to_xml(os, indent);
		os << indent << "</sensor_pose>";
		os << indent << "<seq_count>" << getSeq_count() << "</seq_count>";
		os << indent << "<is_valid>" << getIs_valid() << "</is_valid>";
	}
	
	// restore from xml stream
	void CommRGBDImageCore::from_xml(std::istream &is) {
		static const Smart::KnuthMorrisPratt kmp_color_image("<color_image>");
		static const Smart::KnuthMorrisPratt kmp_depth_image("<depth_image>");
		static const Smart::KnuthMorrisPratt kmp_base_state("<base_state>");
		static const Smart::KnuthMorrisPratt kmp_sensor_pose("<sensor_pose>");
		static const Smart::KnuthMorrisPratt kmp_seq_count("<seq_count>");
		static const Smart::KnuthMorrisPratt kmp_is_valid("<is_valid>");
		
		if(kmp_color_image.search(is)) {
			CommVisionObjects::CommVideoImage color_imageItem;
			color_imageItem.from_xml(is);
			setColor_image(color_imageItem);
		}
		if(kmp_depth_image.search(is)) {
			CommVisionObjects::CommDepthImage depth_imageItem;
			depth_imageItem.from_xml(is);
			setDepth_image(depth_imageItem);
		}
		if(kmp_base_state.search(is)) {
			CommBasicObjects::CommBaseState base_stateItem;
			base_stateItem.from_xml(is);
			setBase_state(base_stateItem);
		}
		if(kmp_sensor_pose.search(is)) {
			CommBasicObjects::CommPose3d sensor_poseItem;
			sensor_poseItem.from_xml(is);
			setSensor_pose(sensor_poseItem);
		}
		if(kmp_seq_count.search(is)) {
			unsigned int seq_countItem;
			is >> seq_countItem;
			setSeq_count(seq_countItem);
		}
		if(kmp_is_valid.search(is)) {
			bool is_validItem;
			is >> is_validItem;
			setIs_valid(is_validItem);
		}
	}
	
	/*
	void CommRGBDImageCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		CommVisionObjectsIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(CommVisionObjectsIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see CommRGBDImageACE.hh)
		cdr << idl_CommRGBDImage;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_CommRGBDImage);
		cdr << data_hash;
		// std::cout << "CommRGBDImageCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void CommRGBDImageCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		CommVisionObjectsIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see CommRGBDImageACE.hh)
		cdr >> idl_CommRGBDImage;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_CommRGBDImage);
		assert(data_hash == own_hash);
		// std::cout << "CommRGBDImageCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace CommVisionObjects */
