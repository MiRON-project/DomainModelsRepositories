//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2008 Matthias Lutz, Andreas Steck
//
//        lutz@hs-ulm.de
//        steck@hs-ulm.de
//
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------


#ifndef COMMTRACKINGOBJECTS_COMMTRACKINGGOAL_H_
#define COMMTRACKINGOBJECTS_COMMTRACKINGGOAL_H_

#include "CommTrackingObjects/CommTrackingGoalCore.hh"

namespace CommTrackingObjects {
		
class CommTrackingGoal : public CommTrackingGoalCore {
	public:
		// default constructors
		CommTrackingGoal();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommTrackingGoal(const double &angle, const double &distance, const double &x, const double &y, const bool &isValid, const std::vector<double> &cov, const CommTrackingObjects::TrackingGoalType &trackingType = CommTrackingObjects::TrackingGoalType());
		
		CommTrackingGoal(const CommTrackingGoalCore &commTrackingGoal);
		CommTrackingGoal(const DATATYPE &commTrackingGoal);
		virtual ~CommTrackingGoal();
		
		// use framework specific getter and setter methods from core (base) class
		using CommTrackingGoalCore::get;
		using CommTrackingGoalCore::set;
		
		//
		// feel free to add customized methods here
		//

		inline double getAngle() const
		{
			return idl_CommTrackingGoal.angle;
		}
		inline void setAngle(const double &angle)
		{
			idl_CommTrackingGoal.angle = angle;
		}

		inline std::vector<double>& getCovRef()
		{
			return idl_CommTrackingGoal.cov;
		}

		inline double getDistance() const
		{
			return idl_CommTrackingGoal.distance;
		}
		inline void setDistance(const double &distance)
		{
			idl_CommTrackingGoal.distance = distance;
		}

		inline bool getIsValid() const
		{
			return idl_CommTrackingGoal.isValid;
		}
		inline void setIsValid(const bool &isValid)
		{
			idl_CommTrackingGoal.isValid = isValid;
		}

		inline double getX() const
		{
			return idl_CommTrackingGoal.x;
		}
		inline void setX(const double &x)
		{
			idl_CommTrackingGoal.x = x;
		}

		inline double getY() const
		{
			return idl_CommTrackingGoal.y;
		}
		inline void setY(const double &y)
		{
			idl_CommTrackingGoal.y = y;
		}

		//
		// add your customized interface here
		//

		void get( double &_angle, double &_distance, double &_x, double &_y, bool &_valid) const;
		void set( double _angle, double _distance, double _x, double _y, bool _valid );

		void set( double _angle, double _distance, double _x, double _y, bool _valid, const std::vector<double>& cov);
		void get( double &_angle, double &_distance, double &_x, double &_y, bool &_valid, std::vector<double>& cov) const;
};

inline std::ostream &operator<<(std::ostream &os, const CommTrackingGoal &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace CommTrackingObjects */
#endif /* COMMTRACKINGOBJECTS_COMMTRACKINGGOAL_H_ */
