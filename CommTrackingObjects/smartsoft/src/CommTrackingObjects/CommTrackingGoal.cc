//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2008 Matthias Lutz, Andreas Steck
//
//        lutz@hs-ulm.de
//        steck@hs-ulm.de
//
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#include "CommTrackingObjects/CommTrackingGoal.hh"

using namespace CommTrackingObjects;

CommTrackingGoal::CommTrackingGoal()
:	CommTrackingGoalCore()
{  }


/**
 * Constructor to set all values.
 * NOTE that you have to keep this constructor consistent with the model!
 * Use  at your own choice.
 *
 * The preferred way to set values for initialization is:
 *      CommRepository::MyCommObject obj;
 *      obj.setX(1).setY(2).setZ(3)...;
CommTrackingGoal::CommTrackingGoal(const double &angle, const double &distance, const double &x, const double &y, const bool &isValid, const std::vector<double> &cov, const CommTrackingObjects::TrackingGoalType &trackingType)
:	CommTrackingGoalCore() // base constructor sets default values as defined in the model
{
	setTrackingType(trackingType);
	setAngle(angle);
	setDistance(distance);
	setX(x);
	setY(y);
	setIsValid(isValid);
	setCov(cov);
}
 */

CommTrackingGoal::CommTrackingGoal(const CommTrackingGoalCore &commTrackingGoal)
:	CommTrackingGoalCore(commTrackingGoal)
{  }

CommTrackingGoal::CommTrackingGoal(const DATATYPE &commTrackingGoal)
:	CommTrackingGoalCore(commTrackingGoal)
{  }

CommTrackingGoal::~CommTrackingGoal()
{  }

void CommTrackingGoal::get(double &_angle, double &_distance, double &_x, double &_y, bool &_valid) const
{
  _angle = idl_CommTrackingGoal.angle;
  _distance = idl_CommTrackingGoal.distance;
  _x = idl_CommTrackingGoal.x;
  _y = idl_CommTrackingGoal.y;
  _valid = idl_CommTrackingGoal.isValid;
}


void CommTrackingGoal::set( double _angle, double _distance, double _x, double _y, bool _valid )
{
	idl_CommTrackingGoal.angle = _angle;
	idl_CommTrackingGoal.distance = _distance;
	idl_CommTrackingGoal.x = _x;
	idl_CommTrackingGoal.y = _y;
	idl_CommTrackingGoal.isValid = _valid;
}


void CommTrackingGoal::set( double _angle, double _distance, double _x, double _y, bool _valid, const std::vector<double>& _cov){
	set(_angle, _distance, _x, _y, _valid);
	idl_CommTrackingGoal.cov.clear();
	std::vector<double>::const_iterator iter;
	for(iter=_cov.begin();iter!=_cov.end();iter++){
		idl_CommTrackingGoal.cov.push_back(*iter);
	}

}

void CommTrackingGoal::get( double &_angle, double &_distance, double &_x, double &_y, bool &_valid, std::vector<double>& _cov) const{
	get(_angle, _distance, _x, _y, _valid);
	_cov.clear();
	std::vector<double>::const_iterator iter;
	for(iter=idl_CommTrackingGoal.cov.begin();iter!=idl_CommTrackingGoal.cov.end();iter++){
			_cov.push_back(*iter);
	}
}
