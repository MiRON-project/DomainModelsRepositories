//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMTRACKINGOBJECTS_COMMDETECTEDMARKEREVENTPARAMETER_CORE_H_
#define COMMTRACKINGOBJECTS_COMMDETECTEDMARKEREVENTPARAMETER_CORE_H_

#include "CommTrackingObjects/CommDetectedMarkerEventParameterData.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommTrackingObjects {
	
class CommDetectedMarkerEventParameterCore {
protected:
	// data structure
	CommTrackingObjectsIDL::CommDetectedMarkerEventParameter idl_CommDetectedMarkerEventParameter;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommTrackingObjectsIDL::CommDetectedMarkerEventParameter DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommDetectedMarkerEventParameterCore();
	CommDetectedMarkerEventParameterCore(const DATATYPE &data);
	// default destructor
	virtual ~CommDetectedMarkerEventParameterCore();
	
	const DATATYPE& get() const { return idl_CommDetectedMarkerEventParameter; }
	operator const DATATYPE&() const { return idl_CommDetectedMarkerEventParameter; }
	DATATYPE& set() { return idl_CommDetectedMarkerEventParameter; }

	static inline std::string identifier(void) { return "CommTrackingObjects::CommDetectedMarkerEventParameter"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Tag_ids
	/**
	 * Getter methods for idl_CommDetectedMarkerEventParameter.tag_ids of type vector<unsigned int>
	 */
	inline std::vector<unsigned int>& getTag_idsRef() { return idl_CommDetectedMarkerEventParameter.tag_ids; }
	inline std::vector<unsigned int> getTag_idsCopy() const {
		return std::vector<unsigned int>(idl_CommDetectedMarkerEventParameter.tag_ids.begin(), idl_CommDetectedMarkerEventParameter.tag_ids.end());
	}
	inline unsigned int getTag_idsElemAtPos(const size_t &pos) const { return idl_CommDetectedMarkerEventParameter.tag_ids[pos]; }
	inline size_t getTag_idsSize() const { return idl_CommDetectedMarkerEventParameter.tag_ids.size(); }
	inline bool isTag_idsEmpty() const { return idl_CommDetectedMarkerEventParameter.tag_ids.empty(); }
	/**
	 * Setter methods for idl_CommDetectedMarkerEventParameter.tag_ids of type vector<unsigned int>
	 */
	inline CommDetectedMarkerEventParameterCore& setTag_ids(const std::vector<unsigned int> &tag_ids) { idl_CommDetectedMarkerEventParameter.tag_ids = tag_ids; return *this; }
	inline bool setTag_idsElemAtPos(const size_t &pos, const unsigned int &elem) {
		if(pos < idl_CommDetectedMarkerEventParameter.tag_ids.size()) {
			idl_CommDetectedMarkerEventParameter.tag_ids[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertTag_idsVectorAtPos(const size_t &pos, const std::vector<unsigned int> &data) {
		if(pos < idl_CommDetectedMarkerEventParameter.tag_ids.size()) {
			idl_CommDetectedMarkerEventParameter.tag_ids.insert(idl_CommDetectedMarkerEventParameter.tag_ids.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeTag_ids(const size_t &size) { idl_CommDetectedMarkerEventParameter.tag_ids.resize(size); }
	inline bool eraseTag_idsElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommDetectedMarkerEventParameter.tag_ids.size() ) {
			idl_CommDetectedMarkerEventParameter.tag_ids.erase(idl_CommDetectedMarkerEventParameter.tag_ids.begin()+pos, idl_CommDetectedMarkerEventParameter.tag_ids.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearTag_ids() { idl_CommDetectedMarkerEventParameter.tag_ids.clear(); }
};

} /* namespace CommTrackingObjects */
#endif /* COMMTRACKINGOBJECTS_COMMDETECTEDMARKEREVENTPARAMETER_CORE_H_ */
