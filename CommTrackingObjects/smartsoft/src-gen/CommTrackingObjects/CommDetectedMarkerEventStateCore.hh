//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMTRACKINGOBJECTS_COMMDETECTEDMARKEREVENTSTATE_CORE_H_
#define COMMTRACKINGOBJECTS_COMMDETECTEDMARKEREVENTSTATE_CORE_H_

#include "CommTrackingObjects/CommDetectedMarkerEventStateData.hh"
#include "CommTrackingObjects/CommDetectedMarker.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommTrackingObjects {
	
class CommDetectedMarkerEventStateCore {
protected:
	// data structure
	CommTrackingObjectsIDL::CommDetectedMarkerEventState idl_CommDetectedMarkerEventState;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommTrackingObjectsIDL::CommDetectedMarkerEventState DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommDetectedMarkerEventStateCore();
	CommDetectedMarkerEventStateCore(const DATATYPE &data);
	// default destructor
	virtual ~CommDetectedMarkerEventStateCore();
	
	const DATATYPE& get() const { return idl_CommDetectedMarkerEventState; }
	operator const DATATYPE&() const { return idl_CommDetectedMarkerEventState; }
	DATATYPE& set() { return idl_CommDetectedMarkerEventState; }

	static inline std::string identifier(void) { return "CommTrackingObjects::CommDetectedMarkerEventState"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Markers
	/**
	 * Getter methods for element idl_CommDetectedMarkerEventState.markers of type vector<CommTrackingObjects::CommDetectedMarker>
	 */
	inline std::vector<CommTrackingObjects::CommDetectedMarker> getMarkersCopy() const { 
		return std::vector<CommTrackingObjects::CommDetectedMarker>(idl_CommDetectedMarkerEventState.markers.begin(), idl_CommDetectedMarkerEventState.markers.end());
	}
	inline CommTrackingObjects::CommDetectedMarker getMarkersElemAtPos(const size_t &pos) const {
		return CommTrackingObjects::CommDetectedMarker(idl_CommDetectedMarkerEventState.markers[pos]);
	}
	inline size_t getMarkersSize() const { return idl_CommDetectedMarkerEventState.markers.size(); }
	inline bool isMarkersEmpty() const { return idl_CommDetectedMarkerEventState.markers.empty(); }
	/**
	 * Setter methods for idl_CommDetectedMarkerEventState.markers of type vector<CommTrackingObjects::CommDetectedMarker>
	 */
	inline CommDetectedMarkerEventStateCore& setMarkers(const std::vector<CommTrackingObjects::CommDetectedMarker> &markers) { 
		idl_CommDetectedMarkerEventState.markers.assign(markers.begin(), markers.end());
		return *this;
	}
	inline bool setMarkersElemAtPos(const size_t &pos, const CommTrackingObjects::CommDetectedMarker &elem) {
		if(pos < idl_CommDetectedMarkerEventState.markers.size()) {
			idl_CommDetectedMarkerEventState.markers[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertMarkersVectorAtPos(const size_t &pos, const std::vector<CommTrackingObjects::CommDetectedMarker> &data) {
		if(pos < idl_CommDetectedMarkerEventState.markers.size()) {
			idl_CommDetectedMarkerEventState.markers.insert(idl_CommDetectedMarkerEventState.markers.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeMarkers(const size_t &size) { idl_CommDetectedMarkerEventState.markers.resize(size); }
	inline bool eraseMarkersElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommDetectedMarkerEventState.markers.size() ) {
			idl_CommDetectedMarkerEventState.markers.erase(idl_CommDetectedMarkerEventState.markers.begin()+pos, idl_CommDetectedMarkerEventState.markers.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearMarkers() { idl_CommDetectedMarkerEventState.markers.clear(); }
};

} /* namespace CommTrackingObjects */
#endif /* COMMTRACKINGOBJECTS_COMMDETECTEDMARKEREVENTSTATE_CORE_H_ */
