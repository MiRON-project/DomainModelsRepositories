//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommTrackingObjects/CommTrackingGoalACE.hh"
#include <ace/SString.h>
#include "CommTrackingObjects/enumTrackingGoalTypeData.hh"

// serialization operator for element CommTrackingGoal
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommTrackingObjectsIDL::CommTrackingGoal &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element trackingType
	good_bit = good_bit && cdr.write_long(data.trackingType);
	// serialize list-element angle
	good_bit = good_bit && cdr.write_double(data.angle);
	// serialize list-element distance
	good_bit = good_bit && cdr.write_double(data.distance);
	// serialize list-element x
	good_bit = good_bit && cdr.write_double(data.x);
	// serialize list-element y
	good_bit = good_bit && cdr.write_double(data.y);
	// serialize list-element isValid
	good_bit = good_bit && cdr.write_boolean(data.isValid);
	// serialize list-element cov
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.cov.size());
	good_bit = good_bit && cdr.write_double_array(data.cov.data(), data.cov.size());
	
	return good_bit;
}

// de-serialization operator for element CommTrackingGoal
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommTrackingObjectsIDL::CommTrackingGoal &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element trackingType
	good_bit = good_bit && cdr.read_long(data.trackingType);
	// deserialize type element angle
	good_bit = good_bit && cdr.read_double(data.angle);
	// deserialize type element distance
	good_bit = good_bit && cdr.read_double(data.distance);
	// deserialize type element x
	good_bit = good_bit && cdr.read_double(data.x);
	// deserialize type element y
	good_bit = good_bit && cdr.read_double(data.y);
	// deserialize type element isValid
	good_bit = good_bit && cdr.read_boolean(data.isValid);
	// deserialize list-type element cov
	ACE_CDR::ULong data_covNbr;
	good_bit = good_bit && cdr >> data_covNbr;
	data.cov.resize(data_covNbr);
	good_bit = good_bit && cdr.read_double_array(data.cov.data(), data_covNbr);
	
	return good_bit;
}

// serialization operator for CommunicationObject CommTrackingGoal
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommTrackingObjects::CommTrackingGoal &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject CommTrackingGoal
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommTrackingObjects::CommTrackingGoal &obj)
{
	return cdr >> obj.set();
}
