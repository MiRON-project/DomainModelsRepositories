//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMTRACKINGOBJECTS_COMMPERSONTRACKINGLIST_CORE_H_
#define COMMTRACKINGOBJECTS_COMMPERSONTRACKINGLIST_CORE_H_

#include "CommTrackingObjects/CommPersonTrackingListData.hh"
#include "CommTrackingObjects/CommTrackedPerson.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommTrackingObjects {
	
class CommPersonTrackingListCore {
protected:
	// data structure
	CommTrackingObjectsIDL::CommPersonTrackingList idl_CommPersonTrackingList;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommTrackingObjectsIDL::CommPersonTrackingList DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommPersonTrackingListCore();
	CommPersonTrackingListCore(const DATATYPE &data);
	// default destructor
	virtual ~CommPersonTrackingListCore();
	
	const DATATYPE& get() const { return idl_CommPersonTrackingList; }
	operator const DATATYPE&() const { return idl_CommPersonTrackingList; }
	DATATYPE& set() { return idl_CommPersonTrackingList; }

	static inline std::string identifier(void) { return "CommTrackingObjects::CommPersonTrackingList"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element TrackedPersons
	/**
	 * Getter methods for element idl_CommPersonTrackingList.trackedPersons of type vector<CommTrackingObjects::CommTrackedPerson>
	 */
	inline std::vector<CommTrackingObjects::CommTrackedPerson> getTrackedPersonsCopy() const { 
		return std::vector<CommTrackingObjects::CommTrackedPerson>(idl_CommPersonTrackingList.trackedPersons.begin(), idl_CommPersonTrackingList.trackedPersons.end());
	}
	inline CommTrackingObjects::CommTrackedPerson getTrackedPersonsElemAtPos(const size_t &pos) const {
		return CommTrackingObjects::CommTrackedPerson(idl_CommPersonTrackingList.trackedPersons[pos]);
	}
	inline size_t getTrackedPersonsSize() const { return idl_CommPersonTrackingList.trackedPersons.size(); }
	inline bool isTrackedPersonsEmpty() const { return idl_CommPersonTrackingList.trackedPersons.empty(); }
	/**
	 * Setter methods for idl_CommPersonTrackingList.trackedPersons of type vector<CommTrackingObjects::CommTrackedPerson>
	 */
	inline CommPersonTrackingListCore& setTrackedPersons(const std::vector<CommTrackingObjects::CommTrackedPerson> &trackedPersons) { 
		idl_CommPersonTrackingList.trackedPersons.assign(trackedPersons.begin(), trackedPersons.end());
		return *this;
	}
	inline bool setTrackedPersonsElemAtPos(const size_t &pos, const CommTrackingObjects::CommTrackedPerson &elem) {
		if(pos < idl_CommPersonTrackingList.trackedPersons.size()) {
			idl_CommPersonTrackingList.trackedPersons[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertTrackedPersonsVectorAtPos(const size_t &pos, const std::vector<CommTrackingObjects::CommTrackedPerson> &data) {
		if(pos < idl_CommPersonTrackingList.trackedPersons.size()) {
			idl_CommPersonTrackingList.trackedPersons.insert(idl_CommPersonTrackingList.trackedPersons.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeTrackedPersons(const size_t &size) { idl_CommPersonTrackingList.trackedPersons.resize(size); }
	inline bool eraseTrackedPersonsElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommPersonTrackingList.trackedPersons.size() ) {
			idl_CommPersonTrackingList.trackedPersons.erase(idl_CommPersonTrackingList.trackedPersons.begin()+pos, idl_CommPersonTrackingList.trackedPersons.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearTrackedPersons() { idl_CommPersonTrackingList.trackedPersons.clear(); }
	
	// getter and setter for element FollowedPerson
	inline int getFollowedPerson() const { return idl_CommPersonTrackingList.followedPerson; }
	inline CommPersonTrackingListCore& setFollowedPerson(const int &followedPerson) { idl_CommPersonTrackingList.followedPerson = followedPerson; return *this; }
	
	// getter and setter for element IsValid
	inline bool getIsValid() const { return idl_CommPersonTrackingList.isValid; }
	inline CommPersonTrackingListCore& setIsValid(const bool &isValid) { idl_CommPersonTrackingList.isValid = isValid; return *this; }
};

} /* namespace CommTrackingObjects */
#endif /* COMMTRACKINGOBJECTS_COMMPERSONTRACKINGLIST_CORE_H_ */
