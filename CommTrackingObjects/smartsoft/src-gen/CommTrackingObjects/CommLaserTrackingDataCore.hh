//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMTRACKINGOBJECTS_COMMLASERTRACKINGDATA_CORE_H_
#define COMMTRACKINGOBJECTS_COMMLASERTRACKINGDATA_CORE_H_

#include "CommTrackingObjects/CommLaserTrackingDataData.hh"
#include "CommBasicObjects/CommMobileLaserScan.hh"
#include "CommTrackingObjects/CommLaserTrackedObject.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommTrackingObjects {
	
class CommLaserTrackingDataCore {
protected:
	// data structure
	CommTrackingObjectsIDL::CommLaserTrackingData idl_CommLaserTrackingData;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommTrackingObjectsIDL::CommLaserTrackingData DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommLaserTrackingDataCore();
	CommLaserTrackingDataCore(const DATATYPE &data);
	// default destructor
	virtual ~CommLaserTrackingDataCore();
	
	const DATATYPE& get() const { return idl_CommLaserTrackingData; }
	operator const DATATYPE&() const { return idl_CommLaserTrackingData; }
	DATATYPE& set() { return idl_CommLaserTrackingData; }

	static inline std::string identifier(void) { return "CommTrackingObjects::CommLaserTrackingData"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Scan
	inline CommBasicObjects::CommMobileLaserScan getScan() const { return CommBasicObjects::CommMobileLaserScan(idl_CommLaserTrackingData.scan); }
	inline CommLaserTrackingDataCore& setScan(const CommBasicObjects::CommMobileLaserScan &scan) { idl_CommLaserTrackingData.scan = scan; return *this; }
	
	// getter and setter for element Objects
	/**
	 * Getter methods for element idl_CommLaserTrackingData.objects of type vector<CommTrackingObjects::CommLaserTrackedObject>
	 */
	inline std::vector<CommTrackingObjects::CommLaserTrackedObject> getObjectsCopy() const { 
		return std::vector<CommTrackingObjects::CommLaserTrackedObject>(idl_CommLaserTrackingData.objects.begin(), idl_CommLaserTrackingData.objects.end());
	}
	inline CommTrackingObjects::CommLaserTrackedObject getObjectsElemAtPos(const size_t &pos) const {
		return CommTrackingObjects::CommLaserTrackedObject(idl_CommLaserTrackingData.objects[pos]);
	}
	inline size_t getObjectsSize() const { return idl_CommLaserTrackingData.objects.size(); }
	inline bool isObjectsEmpty() const { return idl_CommLaserTrackingData.objects.empty(); }
	/**
	 * Setter methods for idl_CommLaserTrackingData.objects of type vector<CommTrackingObjects::CommLaserTrackedObject>
	 */
	inline CommLaserTrackingDataCore& setObjects(const std::vector<CommTrackingObjects::CommLaserTrackedObject> &objects) { 
		idl_CommLaserTrackingData.objects.assign(objects.begin(), objects.end());
		return *this;
	}
	inline bool setObjectsElemAtPos(const size_t &pos, const CommTrackingObjects::CommLaserTrackedObject &elem) {
		if(pos < idl_CommLaserTrackingData.objects.size()) {
			idl_CommLaserTrackingData.objects[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertObjectsVectorAtPos(const size_t &pos, const std::vector<CommTrackingObjects::CommLaserTrackedObject> &data) {
		if(pos < idl_CommLaserTrackingData.objects.size()) {
			idl_CommLaserTrackingData.objects.insert(idl_CommLaserTrackingData.objects.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeObjects(const size_t &size) { idl_CommLaserTrackingData.objects.resize(size); }
	inline bool eraseObjectsElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommLaserTrackingData.objects.size() ) {
			idl_CommLaserTrackingData.objects.erase(idl_CommLaserTrackingData.objects.begin()+pos, idl_CommLaserTrackingData.objects.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearObjects() { idl_CommLaserTrackingData.objects.clear(); }
};

} /* namespace CommTrackingObjects */
#endif /* COMMTRACKINGOBJECTS_COMMLASERTRACKINGDATA_CORE_H_ */
