//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef DOMAINVISION_IMAGEPARAMETERS_CORE_H_
#define DOMAINVISION_IMAGEPARAMETERS_CORE_H_

#include "DomainVision/ImageParametersData.hh"
#include "DomainVision/enumFormatType.hh"

#include <iostream>
#include <string>
#include <list>

namespace DomainVision {
	
class ImageParametersCore {
protected:
	// data structure
	DomainVisionIDL::ImageParameters idl_ImageParameters;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef DomainVisionIDL::ImageParameters DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	ImageParametersCore();
	ImageParametersCore(const DATATYPE &data);
	// default destructor
	virtual ~ImageParametersCore();
	
	const DATATYPE& get() const { return idl_ImageParameters; }
	operator const DATATYPE&() const { return idl_ImageParameters; }
	DATATYPE& set() { return idl_ImageParameters; }

	static inline std::string identifier(void) { return "DomainVision::ImageParameters"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Width
	inline unsigned int getWidth() const { return idl_ImageParameters.width; }
	inline ImageParametersCore& setWidth(const unsigned int &width) { idl_ImageParameters.width = width; return *this; }
	
	// getter and setter for element Height
	inline unsigned int getHeight() const { return idl_ImageParameters.height; }
	inline ImageParametersCore& setHeight(const unsigned int &height) { idl_ImageParameters.height = height; return *this; }
	
	// getter and setter for element Format
	inline DomainVision::FormatType getFormat() const { return DomainVision::FormatType(idl_ImageParameters.format); }
	inline ImageParametersCore& setFormat(const DomainVision::FormatType &format) { idl_ImageParameters.format = format; return *this; }
	
	// getter and setter for element Depth
	inline unsigned int getDepth() const { return idl_ImageParameters.depth; }
	inline ImageParametersCore& setDepth(const unsigned int &depth) { idl_ImageParameters.depth = depth; return *this; }
	
	// getter and setter for element Size
	inline unsigned int getSize() const { return idl_ImageParameters.size; }
	inline ImageParametersCore& setSize(const unsigned int &size) { idl_ImageParameters.size = size; return *this; }
};

} /* namespace DomainVision */
#endif /* DOMAINVISION_IMAGEPARAMETERS_CORE_H_ */
