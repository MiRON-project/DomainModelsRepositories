//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef DOMAINVISION_COMM3DPOINTCLOUD_CORE_H_
#define DOMAINVISION_COMM3DPOINTCLOUD_CORE_H_

#include "DomainVision/Comm3dPointCloudData.hh"
#include "CommBasicObjects/CommPosition3d.hh"

#include <iostream>
#include <string>
#include <list>

namespace DomainVision {
	
class Comm3dPointCloudCore {
protected:
	// data structure
	DomainVisionIDL::Comm3dPointCloud idl_Comm3dPointCloud;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef DomainVisionIDL::Comm3dPointCloud DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	Comm3dPointCloudCore();
	Comm3dPointCloudCore(const DATATYPE &data);
	// default destructor
	virtual ~Comm3dPointCloudCore();
	
	const DATATYPE& get() const { return idl_Comm3dPointCloud; }
	operator const DATATYPE&() const { return idl_Comm3dPointCloud; }
	DATATYPE& set() { return idl_Comm3dPointCloud; }

	static inline std::string identifier(void) { return "DomainVision::Comm3dPointCloud"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Valid
	inline bool getValid() const { return idl_Comm3dPointCloud.valid; }
	inline Comm3dPointCloudCore& setValid(const bool &valid) { idl_Comm3dPointCloud.valid = valid; return *this; }
	
	// getter and setter for element Points
	/**
	 * Getter methods for element idl_Comm3dPointCloud.points of type vector<CommBasicObjects::CommPosition3d>
	 */
	inline std::vector<CommBasicObjects::CommPosition3d> getPointsCopy() const { 
		return std::vector<CommBasicObjects::CommPosition3d>(idl_Comm3dPointCloud.points.begin(), idl_Comm3dPointCloud.points.end());
	}
	inline CommBasicObjects::CommPosition3d getPointsElemAtPos(const size_t &pos) const {
		return CommBasicObjects::CommPosition3d(idl_Comm3dPointCloud.points[pos]);
	}
	inline size_t getPointsSize() const { return idl_Comm3dPointCloud.points.size(); }
	inline bool isPointsEmpty() const { return idl_Comm3dPointCloud.points.empty(); }
	/**
	 * Setter methods for idl_Comm3dPointCloud.points of type vector<CommBasicObjects::CommPosition3d>
	 */
	inline Comm3dPointCloudCore& setPoints(const std::vector<CommBasicObjects::CommPosition3d> &points) { 
		idl_Comm3dPointCloud.points.assign(points.begin(), points.end());
		return *this;
	}
	inline bool setPointsElemAtPos(const size_t &pos, const CommBasicObjects::CommPosition3d &elem) {
		if(pos < idl_Comm3dPointCloud.points.size()) {
			idl_Comm3dPointCloud.points[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertPointsVectorAtPos(const size_t &pos, const std::vector<CommBasicObjects::CommPosition3d> &data) {
		if(pos < idl_Comm3dPointCloud.points.size()) {
			idl_Comm3dPointCloud.points.insert(idl_Comm3dPointCloud.points.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizePoints(const size_t &size) { idl_Comm3dPointCloud.points.resize(size); }
	inline bool erasePointsElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Comm3dPointCloud.points.size() ) {
			idl_Comm3dPointCloud.points.erase(idl_Comm3dPointCloud.points.begin()+pos, idl_Comm3dPointCloud.points.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearPoints() { idl_Comm3dPointCloud.points.clear(); }
};

} /* namespace DomainVision */
#endif /* DOMAINVISION_COMM3DPOINTCLOUD_CORE_H_ */
