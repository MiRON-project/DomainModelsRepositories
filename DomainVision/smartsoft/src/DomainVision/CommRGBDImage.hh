//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#ifndef DOMAINVISION_COMMRGBDIMAGE_H_
#define DOMAINVISION_COMMRGBDIMAGE_H_

#include "DomainVision/CommRGBDImageCore.hh"

namespace DomainVision {
		
class CommRGBDImage : public CommRGBDImageCore {
	public:
		// default constructors
		CommRGBDImage();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommRGBDImage(const DomainVision::CommVideoImage &color_image, const DomainVision::CommDepthImage &depth_image, const CommBasicObjects::CommBaseState &base_state, const CommBasicObjects::CommPose3d &sensor_pose, const unsigned int &seq_count, const bool &is_valid);
		
		CommRGBDImage(const CommRGBDImageCore &commRGBDImage);
		CommRGBDImage(const DATATYPE &commRGBDImage);
		virtual ~CommRGBDImage();
		
		// use framework specific getter and setter methods from core (base) class
		using CommRGBDImageCore::get;
		using CommRGBDImageCore::set;
		
		inline void set_rgb_image(const unsigned char* data, unsigned int width, unsigned int height)
		{
			idl_CommRGBDImage.color_image.data.resize(width * height * 3);
			idl_CommRGBDImage.color_image.parameter.width  = width;
			idl_CommRGBDImage.color_image.parameter.height = height;

			// does for our usecase only work when float's between corba and c++-floats match!
			assert(sizeof(unsigned char) == sizeof(DomainVisionIDL::CommVideoImage_data_type::value_type));

			memcpy(&idl_CommRGBDImage.color_image.data[0], data, width * height * sizeof(unsigned char)* 3);
			idl_CommRGBDImage.color_image.is_valid = true;
			//std::cout <<"Setting rgb image" <<std::endl;
		}
		inline void set_rgb_image(const std::vector<unsigned char> &data, unsigned int width, unsigned int height)
		{
			idl_CommRGBDImage.color_image.data.resize(width * height * 3);
			idl_CommRGBDImage.color_image.parameter.width = width;
			idl_CommRGBDImage.color_image.parameter.height = height;

			for (size_t i = 0; i < idl_CommRGBDImage.color_image.data.size(); i++)
			{
				idl_CommRGBDImage.color_image.data[i] = data[i];
			}

			idl_CommRGBDImage.color_image.is_valid = true;
		}
		/**
		 * Set distance image.
		 * items measured in meter.
		 */
		inline void set_distances(const float* data, unsigned int width, unsigned int height)
		{
			idl_CommRGBDImage.depth_image.data.resize(width * height * 1);
			idl_CommRGBDImage.depth_image.width  = width;
			idl_CommRGBDImage.depth_image.height = height;

			//std::cout <<"Inside Set Distances" <<std::endl;

			// does for our usecase only work when float's between corba and c++-floats match!
			assert(sizeof(float) == sizeof(DomainVisionIDL::CommDepthImage_data_type::value_type));

			memcpy(&idl_CommRGBDImage.depth_image.data[0], data, width * height * sizeof(float));
			idl_CommRGBDImage.depth_image.is_valid = true;
		}

		inline void set_distances_byte(const unsigned char* data, unsigned int width, unsigned int height)
		{
			idl_CommRGBDImage.depth_image.data.resize(width * height * 1);
			idl_CommRGBDImage.depth_image.width = width;
			idl_CommRGBDImage.depth_image.height = height;

			//std::cout <<"Inside Set Distances byte" <<std::endl;

			// does for our usecase only work when float's between corba and c++-floats match!
			assert(sizeof(float) == sizeof(DomainVisionIDL::CommDepthImage_data_type::value_type));

			memcpy(&idl_CommRGBDImage.depth_image.data[0], data, width * height * sizeof(float));
			idl_CommRGBDImage.depth_image.is_valid = true;
		}

		/**
		 * Set distance image.
		 * items measured in meter.
		 */
		inline void set_distances(const std::vector<float> &data, unsigned int width, unsigned int height) {
			idl_CommRGBDImage.depth_image.data.resize(width * height * 1);
			idl_CommRGBDImage.depth_image.width = width;
			idl_CommRGBDImage.depth_image.height = height;
			//std::cout <<"Inside Set Distances float" <<std::endl;

			for (size_t i = 0; i < idl_CommRGBDImage.depth_image.data.size(); i++)
			{
				idl_CommRGBDImage.depth_image.data[i] = data[i];
			}

			idl_CommRGBDImage.depth_image.is_valid = true;
		}

		/**
		 * Set distance image. Realsense uses uint16_t
		 *
		 */
		inline void set_distances(const std::vector<uint16_t> &data, unsigned int width, unsigned int height) {
			idl_CommRGBDImage.depth_image.data.resize(width * height * 1);
			idl_CommRGBDImage.depth_image.width = width;
			idl_CommRGBDImage.depth_image.height = height;
			//std::cout <<"Inside Set Distances float size =" <<idl_CommRealSenseImage.distance_data.size() <<std::endl;

			for (size_t i = 0; i < idl_CommRGBDImage.depth_image.data.size(); i++)
			{
				idl_CommRGBDImage.depth_image.data[i] = data[i];
			}

			idl_CommRGBDImage.depth_image.is_valid = true;


		}

		inline void get_color_image_size(unsigned int& width, unsigned int& height, unsigned int& size ){
			width = idl_CommRGBDImage.color_image.parameter.width;
			height = idl_CommRGBDImage.color_image.parameter.height;
			size = idl_CommRGBDImage.color_image.parameter.size;
		}
};

inline std::ostream &operator<<(std::ostream &os, const CommRGBDImage &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace DomainVision */
#endif /* DOMAINVISION_COMMRGBDIMAGE_H_ */
